[
    {
        "name": "checkPassesCallback",
        "headline": "Check if $value passes a validation via a callback that returns a boolean",
        "description": "",
        "aliases": [
            "passesCallback"
        ],
        "paramlist": "string $message, callable $callback"
    },
    {
        "name": "checkPassesChecker",
        "headline": "Chec if $value passes a custom checker",
        "description": "",
        "aliases": [
            "passesCustom",
            "passesChecker"
        ],
        "paramlist": "Valit\\Contracts\\CustomChecker $checker"
    },
    {
        "name": "checkXmlString",
        "headline": "Check if $value is a string containing valid xml",
        "description": "",
        "aliases": [
            "isValidXml",
            "validXml"
        ],
        "paramlist": ""
    },
    {
        "name": "checkMatchesXmlAdvanced",
        "headline": "Check that $value and $against are semantically the same",
        "description": "",
        "aliases": [
            "matchesXmlAdvanced"
        ],
        "paramlist": "string|SimpleXMLElement $against, bool $skipWhite, bool $ignoreCase"
    },
    {
        "name": "checkMatchesXmlWithWhiteSpace",
        "headline": "Check that $value matches $against, enforcing whitespace similarity as well",
        "description": "",
        "aliases": [
            "matchesXmlWithWhiteSpace"
        ],
        "paramlist": "string|SimpleXMLElement $against"
    },
    {
        "name": "checkMatchesXmlWithCase",
        "headline": "Check that $value matches $against, enforcing case similarity as well",
        "description": "",
        "aliases": [
            "matchesXmlWithCase"
        ],
        "paramlist": "string|SimpleXMLElement $against"
    },
    {
        "name": "checkMatchesXmlStrict",
        "headline": "Check that $value matches $against, enforcing whitespace and case similarities as well",
        "description": "",
        "aliases": [
            "matchesXmlWithWhiteSpaceAndCase",
            "matchesXmlStrict"
        ],
        "paramlist": "string|SimpleXMLElement $against"
    },
    {
        "name": "checkMatchesXml",
        "headline": "Check that $value matches $against, ignoring differences in case and whitespace",
        "description": "",
        "aliases": [
            "matchesXml"
        ],
        "paramlist": "string|SimpleXMLElement $against"
    },
    {
        "name": "checkDateParsable",
        "headline": "Check if $value is a string containing a parseable date",
        "description": "The `$format` parameter can be null or a string.\nIf it is null, we will attempt to parse the $value as a DateTime via\nPHPs built-in inference. If `$format` is a string, it will be used\nto define the format of the $value.\nSee <http://php.net/manual/datetime.createfromformat.php> for more info.",
        "aliases": [
            "isParsableDate",
            "parsableDate",
            "isDateString",
            "dateString"
        ],
        "paramlist": "[string|null $format = null]"
    },
    {
        "name": "checkDateAfter",
        "headline": "Check if $value is a date after $against",
        "description": "The `$against` parameter can be one of:\n- `DateTimeInterface`\n- `int` The value will be treated as a UNIX timestamp.\n- `float` The value will be treated as a UNIX timestamp with a sub-second component.\n- `string` The value will be converted to a `DateTime` if possible via PHPs native date time inference.",
        "aliases": [
            "isDateAfter",
            "occursAfter",
            "dateAfter",
            "laterThan",
            "isLaterThan"
        ],
        "paramlist": "DateTimeInterface|string $against"
    },
    {
        "name": "checkDateBefore",
        "headline": "Check if $value is a date after $against",
        "description": "The `$against` parameter can be one of:\n- `DateTimeInterface`\n- `int` The value will be treated as a UNIX timestamp.\n- `float` The value will be treated as a UNIX timestamp with a sub-second component.\n- `string` The value will be converted to a `DateTime` if possible via PHPs native date time inference.",
        "aliases": [
            "isDateBefore",
            "occursBefore",
            "dateBefore",
            "earlierThan",
            "isEarlierThan"
        ],
        "paramlist": "mixed $against"
    },
    {
        "name": "checkInThePast",
        "headline": "Check if $value is a date in the past",
        "description": "",
        "aliases": [
            "dateInThePast",
            "isDateInThePast"
        ],
        "paramlist": ""
    },
    {
        "name": "checkInTheFuture",
        "headline": "Check if $value is a date in the past",
        "description": "",
        "aliases": [
            "dateInTheFuture",
            "isDateInTheFuture"
        ],
        "paramlist": ""
    },
    {
        "name": "checkAtMidnight",
        "headline": "Check if $value is a date where the time-component is 00:00:00",
        "description": "",
        "aliases": [
            "dateTimeAtMidnight",
            "isDateTimeAtMidnight",
            "isDateOnly",
            "dateOnly"
        ],
        "paramlist": ""
    },
    {
        "name": "checkAtNoon",
        "headline": "Check if $value is a date where the time-component is 12:00:00",
        "description": "",
        "aliases": [
            "dateTimeAtNoon",
            "isDateTimeAtNoon"
        ],
        "paramlist": ""
    },
    {
        "name": "checkSameDateAs",
        "headline": "Check if $value is a datetime where the date-component is\nthe same as the date-component of $against",
        "description": "",
        "aliases": [
            "sameDateAs",
            "isSameDateAs",
            "sameDayAs",
            "isSameDayAs"
        ],
        "paramlist": "mixed $against"
    },
    {
        "name": "checkSameDayOfWeek",
        "headline": "Check if $value is a datetime where the weekday-component is\nthe same as the weekday-component of $against",
        "description": "",
        "aliases": [
            "sameDayOfWeek",
            "isSameDayOfWeek",
            "isDayOfWeek",
            "dayOfWeek"
        ],
        "paramlist": "mixed $against"
    },
    {
        "name": "checkDayOfMonth",
        "headline": "Check if $value is a datetime where the day of month is $against",
        "description": "The first day of the month is the 1st, i.e. days are 1-indexed.",
        "aliases": [
            "isDayOfMonth",
            "dayOfMonth"
        ],
        "paramlist": "int $dayOfMonth"
    },
    {
        "name": "checkBirthday",
        "headline": "Check if $value is a datetime where the day-month-component is\nthe same as the day-month-component of $otherDate",
        "description": "In other words, are the two dates \"birthday-equivalent\" of each other.\n\nFor instance:\n '1987-12-01 23:30:00' is birthday equivalent of '1950-12-01 11:32:34'\n because they both occur in on december 1st.",
        "aliases": [
            "isBirthdayEquivalentOf",
            "birthdatEquivalentOf",
            "sameDayAndMonth",
            "isSameDayAndMonth"
        ],
        "paramlist": "mixed $otherDate"
    },
    {
        "name": "checkIsJson",
        "headline": "Check that $value is valid json",
        "description": "",
        "aliases": [
            "isValidJson",
            "validJson",
            "isJson"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsUuid",
        "headline": "Check if $value is a uuid",
        "description": "",
        "aliases": [
            "isUuid",
            "uuid"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUuidVersion",
        "headline": "Check if $value is a uuid",
        "description": "",
        "aliases": [
            "isUuidVersion",
            "uuidVersion"
        ],
        "paramlist": "int $version"
    },
    {
        "name": "checkUidV1",
        "headline": "Check if $value is a version 1 uuid",
        "description": "",
        "aliases": [
            "uuidV1",
            "isUuidV1"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUidV2",
        "headline": "Check if $value is a version 2 uuid",
        "description": "",
        "aliases": [
            "uuidV2",
            "isUuidV2"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUidV3",
        "headline": "Check if $value is a version 3 uuid",
        "description": "",
        "aliases": [
            "uuidV3",
            "isUuidV3"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUidV4",
        "headline": "Check if $value is a version 4 uuid",
        "description": "",
        "aliases": [
            "uuidV4",
            "isUuidV4"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUidV5",
        "headline": "Check if $value is a version 5 uuid",
        "description": "",
        "aliases": [
            "uuidV5",
            "isUuidV5"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIdenticalTo",
        "headline": "Check that $value === $against",
        "description": "",
        "aliases": [
            "isIdenticalTo",
            "identicalTo",
            "sameAs",
            "isSameAs"
        ],
        "paramlist": "mixed $against"
    },
    {
        "name": "checkEquals",
        "headline": "Check that $value == $against (loose comparison)",
        "description": "Examples:\n\n| $value     | $equals       | Valid     |\n|:-----------|:--------------|:----------|\n| true       | true          | yes       |\n| true       | 1             | yes       |\n| \"true\"     | 1             | no        |\n| \"true\"     | true          | yes       |\n| \"true\"     | \"foo\"         | no        |\n| \"1\"        | true          | yes       |\n| \"1\"        | 1             | yes       |\n| \"1\"        | \"foo\"         | no        |\n| \"0\"        | true          | no        |\n| \"0\"        | false         | yes       |\n| \"0\"        | 0             | yes       |",
        "aliases": [
            "is",
            "equals"
        ],
        "paramlist": "mixed $equals"
    },
    {
        "name": "checkIsOneOf",
        "headline": "Check that $value is equal to (==) one of the values in $allowedValues",
        "description": "If you give multiple arguments to this function, each argument will\nbe treated as a possible option.\nIf you give only one argument to this function, then that argument must\nbe iterable (array or Traversable). The entries in that variable will\nbe treated as the options allowed.\n\nCode examples:\n\n```php\n// Check that $foo is either 'foo' or 'bar'\nCheck::that($foo)->isOneOf('foo', 'bar');\nCheck::that($foo)->isOneOf(['foo', 'bar']);\n\n// Check that $foo is either ['a', 'b'] or ['c', 'd']\nCheck::that($foo)->isOneOf(['a', 'b'], ['c', 'd']);\nCheck::that($foo)->isOneOf([ ['a', 'b'], ['c', 'd'] ]);\n```\n\n---",
        "aliases": [
            "isOneOf",
            "oneOf"
        ],
        "paramlist": "mixed[]|iterable $allowedValues"
    },
    {
        "name": "checkIsNotOneOf",
        "headline": "Check that $value is NOT equal to (==) any of the values in $unacceptableValues",
        "description": "See isOneOf() for examples.",
        "aliases": [
            "isNotOneOf",
            "notOneOf"
        ],
        "paramlist": "mixed[]|iterable $unacceptableValues"
    },
    {
        "name": "checkIsTruthy",
        "headline": "Check that $value is truthy",
        "description": "",
        "aliases": [
            "isTruthy",
            "truthy"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsFalsy",
        "headline": "Check that $value is falsy",
        "description": "",
        "aliases": [
            "isFalsy",
            "falsy"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsTrue",
        "headline": "Check that $value is identical to true",
        "description": "",
        "aliases": [
            "isTrue",
            "true"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsFalse",
        "headline": "Check that $value is identical to false",
        "description": "",
        "aliases": [
            "isFalse",
            "false"
        ],
        "paramlist": ""
    },
    {
        "name": "checkHasType",
        "headline": "Check that $value has a given type",
        "description": "Possible types:\n\n| $type          | Validation                                    |\n|:-------------- |:-------------------------                     |\n| `null`         | `is_null()`                                   |\n| `object`       | `is_object()`                                 |\n| `int`          | `is_int()`                                    |\n| `integer`      | `is_int()`                                    |\n| `bool`         | `is_bool()`                                   |\n| `boolean`      | `is_bool()`                                   |\n| `string`       | `is_string()`                                 |\n| `float`        | `is_float()`                                  |\n| `double`       | `is_float()`                                  |\n| `numeric`      | `is_numeric()`                                |\n| `nan`          | `is_nan()`                                    |\n| `inf`          | `is_inf()`                                    |\n| `callable`     | `is_callable()`                               |\n| `intable`      | `stringable` that can be converted to an int  |\n| `iterable`     | `is_array() || is_a($value, 'Traversable')`   |\n| `countable`    | `is_array() || is_a($value, 'Cointable')`     |\n| `arrayable`    | `is_array() || is_a($value, 'ArrayAccess')`   |\n| `container`    | `iterable`, `countable` and `arrayable`       |\n| `stringable`   | scalar or object with a`__toString()` method  |\n| _class name_   | `is_a()`                                      |\n| _foo[]_        | array of _foo_                                |\n\nCode examples:\n\n```php\n// single type\nCheck::that($foo)->hasType('callable');\n\n// multiple allowed types via the pipe character\nCheck::that($foo)->hasType('float | int');\n\n// check that $foo is an array of floats\n// or an array of integers\nCheck::that($foo)->hasType('float[] | int[]')\n\n// mixing classes, interfaces and basic types.\nCheck::that($foo)->hasType('int|DateTime|DateTimeImmutable')\n\n// multiple types via array notation\nCheck::that($foo)->hasType(['object', 'array'])\n\n// a strict array with 0-based numeric index\nVal::mustBe($value, 'mixed[]');\n\n// a strict array of strict arrays\nVal::mustBe($value, 'mixed[][]');\n```\n\n---",
        "aliases": [
            "hasType",
            "isType",
            "typeof"
        ],
        "paramlist": "string|string[] $type"
    },
    {
        "name": "checkScalar",
        "headline": "Check that $value is scalar",
        "description": "",
        "aliases": [
            "isScalar",
            "scalar"
        ],
        "paramlist": ""
    },
    {
        "name": "checkBool",
        "headline": "Check that $value is a boolean",
        "description": "",
        "aliases": [
            "isBool",
            "isBoolean",
            "bool",
            "boolean"
        ],
        "paramlist": ""
    },
    {
        "name": "checkArray",
        "headline": "Check that $value is an array",
        "description": "",
        "aliases": [
            "isArray",
            "array"
        ],
        "paramlist": ""
    },
    {
        "name": "checkFloat",
        "headline": "Check that $value is a float",
        "description": "",
        "aliases": [
            "isFloat",
            "isDouble",
            "float",
            "double"
        ],
        "paramlist": ""
    },
    {
        "name": "checkInteger",
        "headline": "Check that $value is a an integer",
        "description": "If $comparison and $against are given, we also check that $value\ncomparest to $against via the $comparison.\n\nFor instance:\n\n```php\n// Check that foo is an integer.\nCheck::that($foo)->isInt();\n\n// Check that foo is an integer that is greater than 20\nCheck::that($foo)->isInt('>', 20);\n\n// Check that foo is an integer that is greater than or equal to 0\nCheck::that($foo)->isInt('>=', 20);\nCheck::that($foo)->isInt('≥', 20);   // alternate syntax\n\n// Check that foo is an integer that is equal to 5\nCheck::that($foo)->isInt('=', 5);\n```",
        "aliases": [
            "isInt",
            "isInteger",
            "int",
            "integer"
        ],
        "paramlist": "[string|null $comparison = null], [int $against = null]"
    },
    {
        "name": "checkString",
        "headline": "Check that $value is a float",
        "description": "",
        "aliases": [
            "isString",
            "string"
        ],
        "paramlist": ""
    },
    {
        "name": "checkObject",
        "headline": "Check that $value is a float",
        "description": "",
        "aliases": [
            "isObject",
            "object"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNull",
        "headline": "Check that $value is null",
        "description": "",
        "aliases": [
            "isNull",
            "null"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNotNull",
        "headline": "Check that $value is null",
        "description": "",
        "aliases": [
            "isNotNull",
            "notNull"
        ],
        "paramlist": ""
    },
    {
        "name": "checkResource",
        "headline": "Check that $value is a resource",
        "description": "",
        "aliases": [
            "isResource",
            "resource"
        ],
        "paramlist": ""
    },
    {
        "name": "checkResourceType",
        "headline": "Check that $value is a resource of the given type",
        "description": "",
        "aliases": [
            "isResourceOfType",
            "resourceType",
            "hasResourceType"
        ],
        "paramlist": "string $type"
    },
    {
        "name": "checkCallable",
        "headline": "Check that $value is callable",
        "description": "",
        "aliases": [
            "isCallable",
            "callable"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNumeric",
        "headline": "Check that $value is numeric",
        "description": "",
        "aliases": [
            "numeric",
            "isNumeric"
        ],
        "paramlist": ""
    },
    {
        "name": "checkRealNumber",
        "headline": "Check that $value is a real number",
        "description": "",
        "aliases": [
            "realNumber",
            "isRealNumber"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNaturalNumber",
        "headline": "Check that $value is a natural number",
        "description": "",
        "aliases": [
            "isNaturalNumber",
            "naturalNumber",
            "isWholeNumber",
            "wholeNumber"
        ],
        "paramlist": ""
    },
    {
        "name": "checkGreaterThan",
        "headline": "Check if $value > $against",
        "description": "",
        "aliases": [
            "greaterThan",
            "isGreaterThan",
            "gt"
        ],
        "paramlist": "int|float $against"
    },
    {
        "name": "checkGreaterThanOrEqual",
        "headline": "Check if $value >= $against",
        "description": "",
        "aliases": [
            "greaterThanOrEqual",
            "isGreaterThanOrEqual",
            "gte"
        ],
        "paramlist": "int|float $against"
    },
    {
        "name": "checkLessThan",
        "headline": "Check if $value < $against",
        "description": "",
        "aliases": [
            "lessThan",
            "isLessThan",
            "lowerThan",
            "isLowerThan",
            "lt"
        ],
        "paramlist": "int|float $against"
    },
    {
        "name": "checkLessThanOrEqual",
        "headline": "Check if $value <= $against",
        "description": "",
        "aliases": [
            "lessThanOrEqual",
            "isLessThanOrEqual",
            "lowerThanOrEqual",
            "isLowerThanOrEqual",
            "lte"
        ],
        "paramlist": "int|float $against"
    },
    {
        "name": "checkFloatEqual",
        "headline": "Check if $value is extremely close to $against",
        "description": "",
        "aliases": [
            "closeTo",
            "isCloseTo",
            "floatEquals",
            "isFloatEqualTo"
        ],
        "paramlist": "int|float $against, [float $epsilon = 1.0e-5]"
    },
    {
        "name": "checkOdd",
        "headline": "Check that $value is an odd integer",
        "description": "",
        "aliases": [
            "odd",
            "isOdd"
        ],
        "paramlist": ""
    },
    {
        "name": "checkEven",
        "headline": "Check that $value is an even integer",
        "description": "",
        "aliases": [
            "even",
            "isEven"
        ],
        "paramlist": ""
    },
    {
        "name": "checkPositive",
        "headline": "Check if $value is positive",
        "description": "",
        "aliases": [
            "positive",
            "isPositive"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNegative",
        "headline": "Check if $value is negative",
        "description": "",
        "aliases": [
            "negative",
            "isNegative"
        ],
        "paramlist": ""
    },
    {
        "name": "checkPrimeRelativeTo",
        "headline": "Check if $value is prime relative to $against",
        "description": "",
        "aliases": [
            "isPrimeRelativeTo",
            "primeRelativeTo",
            "isRelativePrime",
            "relativePrime",
            "isCoprimeTo",
            "coprimeTo"
        ],
        "paramlist": "int $against"
    },
    {
        "name": "checkDivisibleBy",
        "headline": "Check if $value is prime relative to $against",
        "description": "",
        "aliases": [
            "isDivisibleBy",
            "divisibleBy",
            "dividesBy"
        ],
        "paramlist": "int $against"
    },
    {
        "name": "checkHexString",
        "headline": "Check if $value contains only hexidecimal characters",
        "description": "",
        "aliases": [
            "isHexString",
            "hexString",
            "isHex"
        ],
        "paramlist": ""
    },
    {
        "name": "checkDecimalString",
        "headline": "Check if $value contains only decimal characters",
        "description": "",
        "aliases": [
            "decimalString",
            "isDecimalString"
        ],
        "paramlist": ""
    },
    {
        "name": "checkCurrencyCode",
        "headline": "Check if $value is a valid alphabetical currency code string",
        "description": "",
        "aliases": [
            "currencyCode",
            "isCurrencyCode",
            "isAlphaCurrencyCode",
            "alphaCurrencyCode"
        ],
        "paramlist": ""
    },
    {
        "name": "checkCurrencyNumber",
        "headline": "Check if $value",
        "description": "",
        "aliases": [
            "numericCurrencyCode",
            "currencyNumber",
            "isNumericCurrencyCode",
            "isCurrencyNumber"
        ],
        "paramlist": ""
    },
    {
        "name": "checkEmail",
        "headline": "Check if $value contains a syntax-valid email address",
        "description": "",
        "aliases": [
            "isEmail",
            "email",
            "isEmailAddress",
            "emailAddress"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUppercase",
        "headline": "Check if $value is only uppercase characters",
        "description": "",
        "aliases": [
            "isUppercase",
            "uppercase"
        ],
        "paramlist": ""
    },
    {
        "name": "checkLowercase",
        "headline": "Check if $value is only lowercase characters",
        "description": "",
        "aliases": [
            "isLowercase",
            "lowercase"
        ],
        "paramlist": ""
    },
    {
        "name": "checkAlphaNumeric",
        "headline": "Check if $value contains only alpha-numeric characters",
        "description": "",
        "aliases": [
            "isAlphaNumeric",
            "alphaNumeric",
            "alphaNum",
            "isAlphaNum"
        ],
        "paramlist": ""
    },
    {
        "name": "checkMatchesRegex",
        "headline": "Check if $value matches a given regular regex",
        "description": "",
        "aliases": [
            "matches",
            "matchesRegex"
        ],
        "paramlist": "string $pattern"
    },
    {
        "name": "checkStringable",
        "headline": "Check if a given value can be converted to a string in a meaningful way",
        "description": "",
        "aliases": [
            "stringable",
            "isStringable",
            "stringCastable",
            "isStringCastable"
        ],
        "paramlist": ""
    },
    {
        "name": "checkStartsWith",
        "headline": "Check if $value starts with a given string",
        "description": "",
        "aliases": [
            "startsWith",
            "beginsWith"
        ],
        "paramlist": "string $startsWith"
    },
    {
        "name": "checkEndsWith",
        "headline": "Check if $value ends with a given string",
        "description": "",
        "aliases": [
            "endsWith"
        ],
        "paramlist": "string $endsWith"
    },
    {
        "name": "checkContainsString",
        "headline": "Check if $value contains a given substring",
        "description": "",
        "aliases": [
            "containsString",
            "containsTheString"
        ],
        "paramlist": "string $substring"
    },
    {
        "name": "checkShorterThan",
        "headline": "Check if $value is a string that is shorter than $length",
        "description": "",
        "aliases": [
            "shorterThan",
            "stringShorterThan",
            "isShorterThan"
        ],
        "paramlist": "int $length"
    },
    {
        "name": "checkLongerThan",
        "headline": "Check if $value is a string that is longer than $length",
        "description": "",
        "aliases": [
            "longerThan",
            "stringLongerThan",
            "isLongerThan",
            "isStringLongerThan"
        ],
        "paramlist": "int $length"
    },
    {
        "name": "checkRelativeLength",
        "headline": "Check if $value is a string where the length compares to $against using the $operator",
        "description": "Examples:\n\n```php\n// length > 20\nCheck::that($foo)->lengthIs('>', 20);\n\n// length <= 255\nCheck::that($foo)->lengthIs('<=', 255);\n\n// alternative:\nCheck::that($foo)->lengthIs('≤', 255);\n\n// check length = 40\nCheck::that($foo)->lengthIs('=', 40);\nCheck::that($foo)->lengthIs(40);     // alt. syntax\n```",
        "aliases": [
            "stringWhereLength",
            "isStringWhereLength",
            "whereLength",
            "length",
            "hasLength",
            "withLength"
        ],
        "paramlist": "string $operator, [int $against = null]"
    },
    {
        "name": "checkArrayAccess",
        "headline": "Check that $value can be accessed as an array",
        "description": "",
        "aliases": [
            "isArrayable",
            "arrayable",
            "hasArrayAccess",
            "arrayAccessible",
            "isArrayAccessible"
        ],
        "paramlist": ""
    },
    {
        "name": "checkStrictArray",
        "headline": "Check that $value is an array with a continuous 0-based index",
        "description": "It is essentially the same as the `mixed[]` pseudo type.",
        "aliases": [
            "isStrictArray",
            "strictArray"
        ],
        "paramlist": ""
    },
    {
        "name": "checkAssociative",
        "headline": "Check that $value is an associative array - i",
        "description": "e. that it contains no integer-keys.",
        "aliases": [
            "isAssociative",
            "associative",
            "isAssociativeArray",
            "associativeArray"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNumericIndex",
        "headline": "Check that $value is a conventional array - i",
        "description": "e. that it contains only integer-keys.",
        "aliases": [
            "hasNumericIndex",
            "isConventionalArray",
            "conventionalArray",
            "isNotAssociative",
            "notAssociative"
        ],
        "paramlist": ""
    },
    {
        "name": "checkNotEmpty",
        "headline": "Check that $value is a non-empty array or Countable",
        "description": "",
        "aliases": [
            "isNotEmptyArray",
            "notEmptyArray",
            "isNotEmpty",
            "notEmpty"
        ],
        "paramlist": ""
    },
    {
        "name": "checkEmpty",
        "headline": "Check that $value is an empty array or Countable",
        "description": "",
        "aliases": [
            "isEmpty",
            "isEmptyArray"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUniqueValues",
        "headline": "Check that $value is an array with unique values",
        "description": "",
        "aliases": [
            "hasUniqueValues",
            "uniqueValues"
        ],
        "paramlist": ""
    },
    {
        "name": "checkKeyExists",
        "headline": "Check that $value is an array or ArrayAccess that has the given $key",
        "description": "",
        "aliases": [
            "hasKey",
            "keyExists"
        ],
        "paramlist": "string|int $key"
    },
    {
        "name": "checkObjectOrClass",
        "headline": "Check if is object or class",
        "description": "",
        "aliases": [
            "isObjectOrClass",
            "objectOrClass"
        ],
        "paramlist": ""
    },
    {
        "name": "checkClassName",
        "headline": "Check if is class name",
        "description": "",
        "aliases": [
            "isClassName",
            "isClass",
            "className",
            "isOfClass"
        ],
        "paramlist": ""
    },
    {
        "name": "checkInterfaceName",
        "headline": "Check if value is the name of an interface",
        "description": "",
        "aliases": [
            "isInterfaceName",
            "isInterface",
            "interfaceName"
        ],
        "paramlist": ""
    },
    {
        "name": "checkTraitName",
        "headline": "Check if value is the fqcn of a trait",
        "description": "",
        "aliases": [
            "isTraitName",
            "isTrait",
            "traitName"
        ],
        "paramlist": ""
    },
    {
        "name": "checkInstanceOf",
        "headline": "Check if $value is an instance of $fqcn",
        "description": "",
        "aliases": [
            "isInstanceOf"
        ],
        "paramlist": "string $fqcn"
    },
    {
        "name": "checkImplements",
        "headline": "Check if value implements the $fqcn interface",
        "description": "",
        "aliases": [
            "isImplementing",
            "implements"
        ],
        "paramlist": "mixed $fqcn"
    },
    {
        "name": "checkHasMethod",
        "headline": "Check if value is an object or class that has the given method",
        "description": "",
        "aliases": [
            "hasMethod"
        ],
        "paramlist": "string $methodName"
    },
    {
        "name": "checkHasProperty",
        "headline": "Check if value is an object or class that has the given propert",
        "description": "",
        "aliases": [
            "hasProperty"
        ],
        "paramlist": "string $property"
    },
    {
        "name": "checkHasTrait",
        "headline": "Check if value is an object or class that uses the given trait",
        "description": "",
        "aliases": [
            "hasTrait"
        ],
        "paramlist": "string $traitName"
    },
    {
        "name": "checkHostname",
        "headline": "Check if $value is a valid host name",
        "description": "",
        "aliases": [
            "isHostname",
            "hostname"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIpAddress",
        "headline": "Check if $value is a valid ipv4 or ipv6 address",
        "description": "",
        "aliases": [
            "isIpAdrress",
            "ipAddress"
        ],
        "paramlist": ""
    },
    {
        "name": "checkUrl",
        "headline": "Check if $value is a complete and absolute web url",
        "description": "",
        "aliases": [
            "url",
            "isUrl"
        ],
        "paramlist": "[string|string[] $schemes = [\"https\",\"http\"]]"
    },
    {
        "name": "checkLogic",
        "headline": "Check that $logic is successful",
        "description": "",
        "aliases": [
            "isSuccessfulLogic",
            "logic",
            "passesLogic"
        ],
        "paramlist": "Valit\\Contracts\\Logic $logic, [bool $withValue = true]"
    },
    {
        "name": "checkPassesOneOf",
        "headline": "Check that one (and only one) of the given branches succeed if given $value",
        "description": "",
        "aliases": [
            "passesOneOf",
            "logicOneOf"
        ],
        "paramlist": "array $branches, [Valit\\Manager $manager = null], [bool $withValue = true]"
    },
    {
        "name": "checkPassesAnyOf",
        "headline": "Check that at least one of the given branches succeed if given $value",
        "description": "",
        "aliases": [
            "passesAnyOf",
            "logicAnyOf"
        ],
        "paramlist": "array $branches, [Valit\\Manager $manager = null], [bool $withValue = true]"
    },
    {
        "name": "checkPassesAllOf",
        "headline": "Check that all of the given branches succeed if given $value",
        "description": "",
        "aliases": [
            "passesAllOf",
            "passesAll",
            "logicAllOf"
        ],
        "paramlist": "array $branches, [Valit\\Manager $manager = null], [bool $withValue = true]"
    },
    {
        "name": "checkPassesAllOrNone",
        "headline": "Check that none of the given branches succeed if given $value",
        "description": "",
        "aliases": [
            "passesNoneOf",
            "passesNone",
            "logicNoneOf",
            "failsAllOf"
        ],
        "paramlist": "array $branches, [Valit\\Manager $manager = null], [bool $withValue = true]"
    },
    {
        "name": "checkDoesNotPass",
        "headline": "Check that the given scenario does not succeed if given $value",
        "description": "",
        "aliases": [
            "doesNotPass",
            "not",
            "fails",
            "invert"
        ],
        "paramlist": "array $scenario, [Valit\\Manager $manager = null], [bool $withValue = true]"
    },
    {
        "name": "checkFileExists",
        "headline": "Check if $value is an existing file",
        "description": "",
        "aliases": [
            "fileExists",
            "isFile"
        ],
        "paramlist": ""
    },
    {
        "name": "checkDirExists",
        "headline": "Check if $value is an existing directory",
        "description": "",
        "aliases": [
            "dirExists",
            "directoryExists",
            "isDir",
            "isDirectory"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsWritable",
        "headline": "Check if $value is exists on the filesystem and is writable",
        "description": "",
        "aliases": [
            "writable",
            "isWritable"
        ],
        "paramlist": ""
    },
    {
        "name": "checkIsReadable",
        "headline": "Check if $value is exists on the filesystem and is readable",
        "description": "",
        "aliases": [
            "readable",
            "isReadable"
        ],
        "paramlist": ""
    },
    {
        "name": "checkExecutable",
        "headline": "Check if $value is an executable filesystem path",
        "description": "",
        "aliases": [
            "isExecutable",
            "executable"
        ],
        "paramlist": ""
    },
    {
        "name": "checkLink",
        "headline": "Check if $value is a filesystem link",
        "description": "",
        "aliases": [
            "isLink",
            "link"
        ],
        "paramlist": ""
    },
    {
        "name": "checkLargerThan",
        "headline": "Check if $value is a filename and that the file is larger than $size",
        "description": "",
        "aliases": [
            "fileLargerThan",
            "isFileLargerThan",
            "fileSizeGreaterThan"
        ],
        "paramlist": "string|int $size"
    },
    {
        "name": "checkSmallerThan",
        "headline": "Check if $value is a filename and that the file is smaller than $size",
        "description": "",
        "aliases": [
            "fileSmallerThan",
            "isFileSmallerThan",
            "fileSizeLessThan"
        ],
        "paramlist": "string|int $size"
    },
    {
        "name": "checkFileTime",
        "headline": "Check if $value is a file, that the timestamp denoted by $timeFunc compares\nto $against given the $compareFunc",
        "description": "Examples:\n```php\n// Example 1\nCheck::that($file)->isFileWhereTime(\n    'created',\n    'at',\n    '1987-01-01 00:00:00'\n);\n\n// Example 2\nCheck::that($file)->fileWhereTime(\n    'modified',\n    'beforeOrAt',\n    '1987-01-01 00:00:00'\n);\n\n// Example 3\nCheck::that($file)->fileWhereTime(\n    'accessed',\n    'after',\n    '5 minutes ago'\n);\n```\n---",
        "aliases": [
            "fileWhereTime",
            "isFileWhereTime"
        ],
        "paramlist": "string $timeFunc, string $compareFunc, mixed $date"
    },
    {
        "name": "checkCreatedAfter",
        "headline": "Check if $value is a file that was created after $date",
        "description": "",
        "aliases": [
            "fileNewerThan",
            "isFileNewerThan",
            "fileCreatedAfter",
            "isFileCreatedAfter"
        ],
        "paramlist": "mixed $date"
    },
    {
        "name": "checkCreatedBefore",
        "headline": "Check if $value is a file that was created before $date",
        "description": "",
        "aliases": [
            "fileOlderThan",
            "isFileOlderThan",
            "fileCreatedBefore",
            "isFileCreatedBefore"
        ],
        "paramlist": "mixed $date"
    },
    {
        "name": "checkModifiedAfter",
        "headline": "Check if $value is a file that was modified after $date",
        "description": "",
        "aliases": [
            "fileModifiedAfter",
            "isFileModifiedAfter"
        ],
        "paramlist": "mixed $date"
    },
    {
        "name": "checkModifiedBefore",
        "headline": "Check if $value is a file that was modified before $date",
        "description": "",
        "aliases": [
            "fileModifiedBefore",
            "isFileModifiedBefore"
        ],
        "paramlist": "mixed $date"
    },
    {
        "name": "checkAccessedAfter",
        "headline": "Check if $value is a file that was accessed after $date",
        "description": "",
        "aliases": [
            "fileAccessedAfter",
            "isFileAccessedAfter"
        ],
        "paramlist": "mixed $date"
    },
    {
        "name": "checkAccessedBefore",
        "headline": "Check if $value is a file that was accessed before $date",
        "description": "",
        "aliases": [
            "fileAccessedBefore",
            "isFileAccessedBefore"
        ],
        "paramlist": "mixed $date"
    }
]

window.projectVersion = '2.0.1';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:Valit" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit.html">Valit</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Valit_Assertion" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Assertion.html">Assertion</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Assertion_Assertion" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Assertion/Assertion.html">Assertion</a>                    </div>                </li>                            <li data-name="class:Valit_Assertion_AssertionBag" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Assertion/AssertionBag.html">AssertionBag</a>                    </div>                </li>                            <li data-name="class:Valit_Assertion_AssertionBagFactory" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Assertion/AssertionBagFactory.html">AssertionBagFactory</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Contracts" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Contracts.html">Contracts</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Contracts_CheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Contracts/CheckProvider.html">CheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Contracts_CustomChecker" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Contracts/CustomChecker.html">CustomChecker</a>                    </div>                </li>                            <li data-name="class:Valit_Contracts_Logic" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Contracts/Logic.html">Logic</a>                    </div>                </li>                            <li data-name="class:Valit_Contracts_Result" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Contracts/Result.html">Result</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Exceptions" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Exceptions.html">Exceptions</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Exceptions_ContainerRequiredException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Exceptions/ContainerRequiredException.html">ContainerRequiredException</a>                    </div>                </li>                            <li data-name="class:Valit_Exceptions_InvalidContainerException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Exceptions/InvalidContainerException.html">InvalidContainerException</a>                    </div>                </li>                            <li data-name="class:Valit_Exceptions_InvalidValueException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Exceptions/InvalidValueException.html">InvalidValueException</a>                    </div>                </li>                            <li data-name="class:Valit_Exceptions_ValueRequiredException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Exceptions/ValueRequiredException.html">ValueRequiredException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Logic" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Logic.html">Logic</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Logic_AllOf" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/AllOf.html">AllOf</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_AllOrNone" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/AllOrNone.html">AllOrNone</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_AnyOf" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/AnyOf.html">AnyOf</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_BaseLogic" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/BaseLogic.html">BaseLogic</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_Conditional" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/Conditional.html">Conditional</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_Executor" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/Executor.html">Executor</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_NoneOf" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/NoneOf.html">NoneOf</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_Not" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/Not.html">Not</a>                    </div>                </li>                            <li data-name="class:Valit_Logic_OneOf" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Logic/OneOf.html">OneOf</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Providers" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Providers.html">Providers</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Providers_ArrayCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/ArrayCheckProvider.html">ArrayCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_BasicCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/BasicCheckProvider.html">BasicCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_CustomCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/CustomCheckProvider.html">CustomCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_DateCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/DateCheckProvider.html">DateCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_FileSystemCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/FileSystemCheckProvider.html">FileSystemCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_JsonCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/JsonCheckProvider.html">JsonCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_LogicCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/LogicCheckProvider.html">LogicCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_NumberCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/NumberCheckProvider.html">NumberCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_ObjectCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/ObjectCheckProvider.html">ObjectCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_StringCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/StringCheckProvider.html">StringCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_UriCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/UriCheckProvider.html">UriCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_UuidCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/UuidCheckProvider.html">UuidCheckProvider</a>                    </div>                </li>                            <li data-name="class:Valit_Providers_XmlCheckProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Providers/XmlCheckProvider.html">XmlCheckProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Result" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Result.html">Result</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Result_AssertionResult" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Result/AssertionResult.html">AssertionResult</a>                    </div>                </li>                            <li data-name="class:Valit_Result_AssertionResultBag" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Result/AssertionResultBag.html">AssertionResultBag</a>                    </div>                </li>                            <li data-name="class:Valit_Result_ContainerResultBag" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Result/ContainerResultBag.html">ContainerResultBag</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Traits" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Traits.html">Traits</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Traits_ContainsResults" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Traits/ContainsResults.html">ContainsResults</a>                    </div>                </li>                            <li data-name="class:Valit_Traits_ProvideViaReflection" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Traits/ProvideViaReflection.html">ProvideViaReflection</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Util" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Util.html">Util</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Util_CallbackChecker" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/CallbackChecker.html">CallbackChecker</a>                    </div>                </li>                            <li data-name="class:Valit_Util_CheckInfo" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/CheckInfo.html">CheckInfo</a>                    </div>                </li>                            <li data-name="class:Valit_Util_ContainerTestClass" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/ContainerTestClass.html">ContainerTestClass</a>                    </div>                </li>                            <li data-name="class:Valit_Util_Date" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/Date.html">Date</a>                    </div>                </li>                            <li data-name="class:Valit_Util_File" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/File.html">File</a>                    </div>                </li>                            <li data-name="class:Valit_Util_FileInfo" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/FileInfo.html">FileInfo</a>                    </div>                </li>                            <li data-name="class:Valit_Util_FlatContainer" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/FlatContainer.html">FlatContainer</a>                    </div>                </li>                            <li data-name="class:Valit_Util_Size" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/Size.html">Size</a>                    </div>                </li>                            <li data-name="class:Valit_Util_Val" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Util/Val.html">Val</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Valit_Validators" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Valit/Validators.html">Validators</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Valit_Validators_ContainerValidator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Validators/ContainerValidator.html">ContainerValidator</a>                    </div>                </li>                            <li data-name="class:Valit_Validators_ValueValidator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Valit/Validators/ValueValidator.html">ValueValidator</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Valit_Check" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Valit/Check.html">Check</a>                    </div>                </li>                            <li data-name="class:Valit_Ensure" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Valit/Ensure.html">Ensure</a>                    </div>                </li>                            <li data-name="class:Valit_Manager" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Valit/Manager.html">Manager</a>                    </div>                </li>                            <li data-name="class:Valit_Value" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Valit/Value.html">Value</a>                    </div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "Valit.html", "name": "Valit", "doc": "Namespace Valit"},{"type": "Namespace", "link": "Valit/Assertion.html", "name": "Valit\\Assertion", "doc": "Namespace Valit\\Assertion"},{"type": "Namespace", "link": "Valit/Contracts.html", "name": "Valit\\Contracts", "doc": "Namespace Valit\\Contracts"},{"type": "Namespace", "link": "Valit/Exceptions.html", "name": "Valit\\Exceptions", "doc": "Namespace Valit\\Exceptions"},{"type": "Namespace", "link": "Valit/Logic.html", "name": "Valit\\Logic", "doc": "Namespace Valit\\Logic"},{"type": "Namespace", "link": "Valit/Providers.html", "name": "Valit\\Providers", "doc": "Namespace Valit\\Providers"},{"type": "Namespace", "link": "Valit/Result.html", "name": "Valit\\Result", "doc": "Namespace Valit\\Result"},{"type": "Namespace", "link": "Valit/Traits.html", "name": "Valit\\Traits", "doc": "Namespace Valit\\Traits"},{"type": "Namespace", "link": "Valit/Util.html", "name": "Valit\\Util", "doc": "Namespace Valit\\Util"},{"type": "Namespace", "link": "Valit/Validators.html", "name": "Valit\\Validators", "doc": "Namespace Valit\\Validators"},
            {"type": "Interface", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/CheckProvider.html", "name": "Valit\\Contracts\\CheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\CheckProvider", "fromLink": "Valit/Contracts/CheckProvider.html", "link": "Valit/Contracts/CheckProvider.html#method_provides", "name": "Valit\\Contracts\\CheckProvider::provides", "doc": "&quot;Return an array of the checks provided by this provider.&quot;"},
            
            {"type": "Interface", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/CustomChecker.html", "name": "Valit\\Contracts\\CustomChecker", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\CustomChecker", "fromLink": "Valit/Contracts/CustomChecker.html", "link": "Valit/Contracts/CustomChecker.html#method_check", "name": "Valit\\Contracts\\CustomChecker::check", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/Logic.html", "name": "Valit\\Contracts\\Logic", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_execute", "name": "Valit\\Contracts\\Logic::execute", "doc": "&quot;Execute the logic.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_withValue", "name": "Valit\\Contracts\\Logic::withValue", "doc": "&quot;Execute the logic with a given value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_withoutValue", "name": "Valit\\Contracts\\Logic::withoutValue", "doc": "&quot;Execute the logic without a value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_requires", "name": "Valit\\Contracts\\Logic::requires", "doc": "&quot;The requirements of this logic.&quot;"},
            
            {"type": "Interface", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/Result.html", "name": "Valit\\Contracts\\Result", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\Result", "fromLink": "Valit/Contracts/Result.html", "link": "Valit/Contracts/Result.html#method_success", "name": "Valit\\Contracts\\Result::success", "doc": "&quot;Did the check (or checks) succeed.&quot;"},
            
            
            {"type": "Class", "fromName": "Valit\\Assertion", "fromLink": "Valit/Assertion.html", "link": "Valit/Assertion/Assertion.html", "name": "Valit\\Assertion\\Assertion", "doc": "&quot;A single assertion.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Assertion\\Assertion", "fromLink": "Valit/Assertion/Assertion.html", "link": "Valit/Assertion/Assertion.html#method___construct", "name": "Valit\\Assertion\\Assertion::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\Assertion", "fromLink": "Valit/Assertion/Assertion.html", "link": "Valit/Assertion/Assertion.html#method___toString", "name": "Valit\\Assertion\\Assertion::__toString", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Assertion", "fromLink": "Valit/Assertion.html", "link": "Valit/Assertion/AssertionBag.html", "name": "Valit\\Assertion\\AssertionBag", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method___construct", "name": "Valit\\Assertion\\AssertionBag::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_addAssertion", "name": "Valit\\Assertion\\AssertionBag::addAssertion", "doc": "&quot;Add an assertion.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_addNewAssertion", "name": "Valit\\Assertion\\AssertionBag::addNewAssertion", "doc": "&quot;Create an assertion and add it.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_all", "name": "Valit\\Assertion\\AssertionBag::all", "doc": "&quot;Get all the assertions.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_getIterator", "name": "Valit\\Assertion\\AssertionBag::getIterator", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_count", "name": "Valit\\Assertion\\AssertionBag::count", "doc": "&quot;The number of assertions in the bag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_hasFlag", "name": "Valit\\Assertion\\AssertionBag::hasFlag", "doc": "&quot;Alias of calling is().&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_setFlag", "name": "Valit\\Assertion\\AssertionBag::setFlag", "doc": "&quot;Set the flag with the given name.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_applyToValidator", "name": "Valit\\Assertion\\AssertionBag::applyToValidator", "doc": "&quot;Apply all the stored assertions to a ValueValidator instance.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_whereValueIs", "name": "Valit\\Assertion\\AssertionBag::whereValueIs", "doc": "&quot;Execute contained assertions in \&quot;check\&quot;-mode.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_setOptional", "name": "Valit\\Assertion\\AssertionBag::setOptional", "doc": "&quot;Set the \u00bboptional\u00ab flag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method_setRequired", "name": "Valit\\Assertion\\AssertionBag::setRequired", "doc": "&quot;Unset the \u00bboptional\u00ab flag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBag", "fromLink": "Valit/Assertion/AssertionBag.html", "link": "Valit/Assertion/AssertionBag.html#method___call", "name": "Valit\\Assertion\\AssertionBag::__call", "doc": "&quot;Add assertions by \&quot;calling\&quot; them.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Assertion", "fromLink": "Valit/Assertion.html", "link": "Valit/Assertion/AssertionBagFactory.html", "name": "Valit\\Assertion\\AssertionBagFactory", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBagFactory", "fromLink": "Valit/Assertion/AssertionBagFactory.html", "link": "Valit/Assertion/AssertionBagFactory.html#method___construct", "name": "Valit\\Assertion\\AssertionBagFactory::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBagFactory", "fromLink": "Valit/Assertion/AssertionBagFactory.html", "link": "Valit/Assertion/AssertionBagFactory.html#method_create", "name": "Valit\\Assertion\\AssertionBagFactory::create", "doc": "&quot;Parse a set of assertions in to a well-formatted AssertionBag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBagFactory", "fromLink": "Valit/Assertion/AssertionBagFactory.html", "link": "Valit/Assertion/AssertionBagFactory.html#method_all", "name": "Valit\\Assertion\\AssertionBagFactory::all", "doc": "&quot;Get all assertions (except the \&quot;required\&quot; and \&quot;optional\&quot; pseudo-assertions).&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBagFactory", "fromLink": "Valit/Assertion/AssertionBagFactory.html", "link": "Valit/Assertion/AssertionBagFactory.html#method_createAssertionBag", "name": "Valit\\Assertion\\AssertionBagFactory::createAssertionBag", "doc": "&quot;Normalize a set of assertions and add it to $this-&gt;assertions.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Assertion\\AssertionBagFactory", "fromLink": "Valit/Assertion/AssertionBagFactory.html", "link": "Valit/Assertion/AssertionBagFactory.html#method_parseAndAdd", "name": "Valit\\Assertion\\AssertionBagFactory::parseAndAdd", "doc": "&quot;Parse a single assertion-expression.&quot;"},
            
            {"type": "Class", "fromName": "Valit", "fromLink": "Valit.html", "link": "Valit/Check.html", "name": "Valit\\Check", "doc": "&quot;Facade for checking values and containers without throwing exceptions.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_that", "name": "Valit\\Check::that", "doc": "&quot;Check that a single variable passes certain criteria.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_value", "name": "Valit\\Check::value", "doc": "&quot;Create an AssertionBag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_oneOf", "name": "Valit\\Check::oneOf", "doc": "&quot;Check that exactly one of the given scenarios\nsucceed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_allOf", "name": "Valit\\Check::allOf", "doc": "&quot;Check that exactly all of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_anyOf", "name": "Valit\\Check::anyOf", "doc": "&quot;Check that one of more of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_noneOf", "name": "Valit\\Check::noneOf", "doc": "&quot;Check that none of of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_allOrNone", "name": "Valit\\Check::allOrNone", "doc": "&quot;Check that all or none of of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_notAnyOf", "name": "Valit\\Check::notAnyOf", "doc": "&quot;Alias of noneOf().&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_not", "name": "Valit\\Check::not", "doc": "&quot;Check that the given scenario does not succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_ifThen", "name": "Valit\\Check::ifThen", "doc": "&quot;Check conditional if-then clause.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method_ifThenElse", "name": "Valit\\Check::ifThenElse", "doc": "&quot;Check conditional if-then clause.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Check", "fromLink": "Valit/Check.html", "link": "Valit/Check.html#method___callStatic", "name": "Valit\\Check::__callStatic", "doc": "&quot;Short hand to creating an AssertionBag.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/CheckProvider.html", "name": "Valit\\Contracts\\CheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\CheckProvider", "fromLink": "Valit/Contracts/CheckProvider.html", "link": "Valit/Contracts/CheckProvider.html#method_provides", "name": "Valit\\Contracts\\CheckProvider::provides", "doc": "&quot;Return an array of the checks provided by this provider.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/CustomChecker.html", "name": "Valit\\Contracts\\CustomChecker", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\CustomChecker", "fromLink": "Valit/Contracts/CustomChecker.html", "link": "Valit/Contracts/CustomChecker.html#method_check", "name": "Valit\\Contracts\\CustomChecker::check", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/Logic.html", "name": "Valit\\Contracts\\Logic", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_execute", "name": "Valit\\Contracts\\Logic::execute", "doc": "&quot;Execute the logic.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_withValue", "name": "Valit\\Contracts\\Logic::withValue", "doc": "&quot;Execute the logic with a given value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_withoutValue", "name": "Valit\\Contracts\\Logic::withoutValue", "doc": "&quot;Execute the logic without a value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Contracts\\Logic", "fromLink": "Valit/Contracts/Logic.html", "link": "Valit/Contracts/Logic.html#method_requires", "name": "Valit\\Contracts\\Logic::requires", "doc": "&quot;The requirements of this logic.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Contracts", "fromLink": "Valit/Contracts.html", "link": "Valit/Contracts/Result.html", "name": "Valit\\Contracts\\Result", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Contracts\\Result", "fromLink": "Valit/Contracts/Result.html", "link": "Valit/Contracts/Result.html#method_success", "name": "Valit\\Contracts\\Result::success", "doc": "&quot;Did the check (or checks) succeed.&quot;"},
            
            {"type": "Class", "fromName": "Valit", "fromLink": "Valit.html", "link": "Valit/Ensure.html", "name": "Valit\\Ensure", "doc": "&quot;Facade for checking values and containers, throwing an exception if an assertion fails.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_that", "name": "Valit\\Ensure::that", "doc": "&quot;Ensure that a single variable passes certain criteria.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_oneOf", "name": "Valit\\Ensure::oneOf", "doc": "&quot;Check that exactly one of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_anyOf", "name": "Valit\\Ensure::anyOf", "doc": "&quot;Check that at least one of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_allOf", "name": "Valit\\Ensure::allOf", "doc": "&quot;Check that all of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_noneOf", "name": "Valit\\Ensure::noneOf", "doc": "&quot;Check that none of the given scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_notAnyOf", "name": "Valit\\Ensure::notAnyOf", "doc": "&quot;Alias of noneOf().&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_allOrNone", "name": "Valit\\Ensure::allOrNone", "doc": "&quot;Check all or none of the givens scenarios succeed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_ifThenElse", "name": "Valit\\Ensure::ifThenElse", "doc": "&quot;Check conditional if-then-else clause.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_ifThen", "name": "Valit\\Ensure::ifThen", "doc": "&quot;Check conditional if-then clause.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Ensure", "fromLink": "Valit/Ensure.html", "link": "Valit/Ensure.html#method_not", "name": "Valit\\Ensure::not", "doc": "&quot;Check that none of the given scenarios succeed.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Exceptions", "fromLink": "Valit/Exceptions.html", "link": "Valit/Exceptions/ContainerRequiredException.html", "name": "Valit\\Exceptions\\ContainerRequiredException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Valit\\Exceptions", "fromLink": "Valit/Exceptions.html", "link": "Valit/Exceptions/InvalidContainerException.html", "name": "Valit\\Exceptions\\InvalidContainerException", "doc": "&quot;Exception thrown when a value is invalid.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Exceptions\\InvalidContainerException", "fromLink": "Valit/Exceptions/InvalidContainerException.html", "link": "Valit/Exceptions/InvalidContainerException.html#method___construct", "name": "Valit\\Exceptions\\InvalidContainerException::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Exceptions\\InvalidContainerException", "fromLink": "Valit/Exceptions/InvalidContainerException.html", "link": "Valit/Exceptions/InvalidContainerException.html#method___call", "name": "Valit\\Exceptions\\InvalidContainerException::__call", "doc": "&quot;Forward calls to inner container.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Exceptions", "fromLink": "Valit/Exceptions.html", "link": "Valit/Exceptions/InvalidValueException.html", "name": "Valit\\Exceptions\\InvalidValueException", "doc": "&quot;Exception to throw when one or more assertions failed.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Exceptions\\InvalidValueException", "fromLink": "Valit/Exceptions/InvalidValueException.html", "link": "Valit/Exceptions/InvalidValueException.html#method___construct", "name": "Valit\\Exceptions\\InvalidValueException::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Exceptions\\InvalidValueException", "fromLink": "Valit/Exceptions/InvalidValueException.html", "link": "Valit/Exceptions/InvalidValueException.html#method_detailedMessage", "name": "Valit\\Exceptions\\InvalidValueException::detailedMessage", "doc": "&quot;Get a detailed error message.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Exceptions\\InvalidValueException", "fromLink": "Valit/Exceptions/InvalidValueException.html", "link": "Valit/Exceptions/InvalidValueException.html#method_errorBullets", "name": "Valit\\Exceptions\\InvalidValueException::errorBullets", "doc": "&quot;Get a bulleted list of error messages.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Exceptions", "fromLink": "Valit/Exceptions.html", "link": "Valit/Exceptions/ValueRequiredException.html", "name": "Valit\\Exceptions\\ValueRequiredException", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Exceptions\\ValueRequiredException", "fromLink": "Valit/Exceptions/ValueRequiredException.html", "link": "Valit/Exceptions/ValueRequiredException.html#method___construct", "name": "Valit\\Exceptions\\ValueRequiredException::__construct", "doc": "&quot;Constructor.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/AllOf.html", "name": "Valit\\Logic\\AllOf", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\AllOf", "fromLink": "Valit/Logic/AllOf.html", "link": "Valit/Logic/AllOf.html#method_makeResult", "name": "Valit\\Logic\\AllOf::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/AllOrNone.html", "name": "Valit\\Logic\\AllOrNone", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\AllOrNone", "fromLink": "Valit/Logic/AllOrNone.html", "link": "Valit/Logic/AllOrNone.html#method_makeResult", "name": "Valit\\Logic\\AllOrNone::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/AnyOf.html", "name": "Valit\\Logic\\AnyOf", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\AnyOf", "fromLink": "Valit/Logic/AnyOf.html", "link": "Valit/Logic/AnyOf.html#method_makeResult", "name": "Valit\\Logic\\AnyOf::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/BaseLogic.html", "name": "Valit\\Logic\\BaseLogic", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method___construct", "name": "Valit\\Logic\\BaseLogic::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_requires", "name": "Valit\\Logic\\BaseLogic::requires", "doc": "&quot;The requirements of this logic.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_execute", "name": "Valit\\Logic\\BaseLogic::execute", "doc": "&quot;Execute the logic.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_success", "name": "Valit\\Logic\\BaseLogic::success", "doc": "&quot;Did the validations succeed?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_withValue", "name": "Valit\\Logic\\BaseLogic::withValue", "doc": "&quot;Execute the logic with a given value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_whereValueIs", "name": "Valit\\Logic\\BaseLogic::whereValueIs", "doc": "&quot;Alias of withValue.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_withoutValue", "name": "Valit\\Logic\\BaseLogic::withoutValue", "doc": "&quot;Execute the logic without a value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method___debugInfo", "name": "Valit\\Logic\\BaseLogic::__debugInfo", "doc": "&quot;Clear debug info.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\BaseLogic", "fromLink": "Valit/Logic/BaseLogic.html", "link": "Valit/Logic/BaseLogic.html#method_makeResult", "name": "Valit\\Logic\\BaseLogic::makeResult", "doc": "&quot;Internal: create the result.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/Conditional.html", "name": "Valit\\Logic\\Conditional", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\Conditional", "fromLink": "Valit/Logic/Conditional.html", "link": "Valit/Logic/Conditional.html#method___construct", "name": "Valit\\Logic\\Conditional::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Conditional", "fromLink": "Valit/Logic/Conditional.html", "link": "Valit/Logic/Conditional.html#method_makeResult", "name": "Valit\\Logic\\Conditional::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/Executor.html", "name": "Valit\\Logic\\Executor", "doc": "&quot;Execute logic.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method___construct", "name": "Valit\\Logic\\Executor::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_results", "name": "Valit\\Logic\\Executor::results", "doc": "&quot;Get the executed results.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_setRequirement", "name": "Valit\\Logic\\Executor::setRequirement", "doc": "&quot;If a scenario requires a value, apply that requirement to the entire executor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_execute", "name": "Valit\\Logic\\Executor::execute", "doc": "&quot;Execute the logic.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_executeLogic", "name": "Valit\\Logic\\Executor::executeLogic", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_addAssertionResultBag", "name": "Valit\\Logic\\Executor::addAssertionResultBag", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_addAssertionResult", "name": "Valit\\Logic\\Executor::addAssertionResult", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_executeBool", "name": "Valit\\Logic\\Executor::executeBool", "doc": "&quot;Execute a boolean expression (evaluate that $bool is true).&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_executeAssertions", "name": "Valit\\Logic\\Executor::executeAssertions", "doc": "&quot;Execute a number of assertions on a value\nand return a ContainerResultBag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method_executeContainerValidation", "name": "Valit\\Logic\\Executor::executeContainerValidation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Executor", "fromLink": "Valit/Logic/Executor.html", "link": "Valit/Logic/Executor.html#method___debugInfo", "name": "Valit\\Logic\\Executor::__debugInfo", "doc": "&quot;Debug info.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/NoneOf.html", "name": "Valit\\Logic\\NoneOf", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\NoneOf", "fromLink": "Valit/Logic/NoneOf.html", "link": "Valit/Logic/NoneOf.html#method_makeResult", "name": "Valit\\Logic\\NoneOf::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/Not.html", "name": "Valit\\Logic\\Not", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\Not", "fromLink": "Valit/Logic/Not.html", "link": "Valit/Logic/Not.html#method___construct", "name": "Valit\\Logic\\Not::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Logic\\Not", "fromLink": "Valit/Logic/Not.html", "link": "Valit/Logic/Not.html#method_makeResult", "name": "Valit\\Logic\\Not::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Logic", "fromLink": "Valit/Logic.html", "link": "Valit/Logic/OneOf.html", "name": "Valit\\Logic\\OneOf", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Logic\\OneOf", "fromLink": "Valit/Logic/OneOf.html", "link": "Valit/Logic/OneOf.html#method_makeResult", "name": "Valit\\Logic\\OneOf::makeResult", "doc": "&quot;Internal.&quot;"},
            
            {"type": "Class", "fromName": "Valit", "fromLink": "Valit.html", "link": "Valit/Manager.html", "name": "Valit\\Manager", "doc": "&quot;Container for all available checks.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_instance", "name": "Valit\\Manager::instance", "doc": "&quot;Get the default (global) manager instance.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_create", "name": "Valit\\Manager::create", "doc": "&quot;Factory method.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method___construct", "name": "Valit\\Manager::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_setGlobal", "name": "Valit\\Manager::setGlobal", "doc": "&quot;Set this manager instance as the global one.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_checks", "name": "Valit\\Manager::checks", "doc": "&quot;Get all checks.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_addProvider", "name": "Valit\\Manager::addProvider", "doc": "&quot;Add the checks from a provider to the manager.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_hasCheck", "name": "Valit\\Manager::hasCheck", "doc": "&quot;Check if the manager can perform a given check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method_executeCheck", "name": "Valit\\Manager::executeCheck", "doc": "&quot;Execute a check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Manager", "fromLink": "Valit/Manager.html", "link": "Valit/Manager.html#method___debugInfo", "name": "Valit\\Manager::__debugInfo", "doc": "&quot;Debug info.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/ArrayCheckProvider.html", "name": "Valit\\Providers\\ArrayCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkArrayAccess", "name": "Valit\\Providers\\ArrayCheckProvider::checkArrayAccess", "doc": "&quot;Check that $value can be accessed as an array.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkStrictArray", "name": "Valit\\Providers\\ArrayCheckProvider::checkStrictArray", "doc": "&quot;Check that $value is an array with a continuous 0-based index.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkAssociative", "name": "Valit\\Providers\\ArrayCheckProvider::checkAssociative", "doc": "&quot;Check that $value is an associative array - i.e. that it contains no integer-keys.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkNumericIndex", "name": "Valit\\Providers\\ArrayCheckProvider::checkNumericIndex", "doc": "&quot;Check that $value is a conventional array - i.e. that it contains only integer-keys.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkNotEmpty", "name": "Valit\\Providers\\ArrayCheckProvider::checkNotEmpty", "doc": "&quot;Check that $value is a non-empty array or Countable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkEmpty", "name": "Valit\\Providers\\ArrayCheckProvider::checkEmpty", "doc": "&quot;Check that $value is an empty array or Countable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkUniqueValues", "name": "Valit\\Providers\\ArrayCheckProvider::checkUniqueValues", "doc": "&quot;Check that $value is an array with unique values.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkKeyExists", "name": "Valit\\Providers\\ArrayCheckProvider::checkKeyExists", "doc": "&quot;Check that $value is an array or ArrayAccess that has the given $key.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ArrayCheckProvider", "fromLink": "Valit/Providers/ArrayCheckProvider.html", "link": "Valit/Providers/ArrayCheckProvider.html#method_checkRelativeCount", "name": "Valit\\Providers\\ArrayCheckProvider::checkRelativeCount", "doc": "&quot;Check if $value is an array (or countable) where the count compares to $against using the $operator.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/BasicCheckProvider.html", "name": "Valit\\Providers\\BasicCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIdenticalTo", "name": "Valit\\Providers\\BasicCheckProvider::checkIdenticalTo", "doc": "&quot;Check that $value === $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkEquals", "name": "Valit\\Providers\\BasicCheckProvider::checkEquals", "doc": "&quot;Check that $value == $against (loose comparison).&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsOneOf", "name": "Valit\\Providers\\BasicCheckProvider::checkIsOneOf", "doc": "&quot;Check that $value is equal to (==) one of the values in $allowedValues.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsNotOneOf", "name": "Valit\\Providers\\BasicCheckProvider::checkIsNotOneOf", "doc": "&quot;Check that $value is NOT equal to (==) any of the values in $unacceptableValues.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsTruthy", "name": "Valit\\Providers\\BasicCheckProvider::checkIsTruthy", "doc": "&quot;Check that $value is truthy.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsFalsy", "name": "Valit\\Providers\\BasicCheckProvider::checkIsFalsy", "doc": "&quot;Check that $value is falsy.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsTrue", "name": "Valit\\Providers\\BasicCheckProvider::checkIsTrue", "doc": "&quot;Check that $value is identical to true.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkIsFalse", "name": "Valit\\Providers\\BasicCheckProvider::checkIsFalse", "doc": "&quot;Check that $value is identical to false.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkHasType", "name": "Valit\\Providers\\BasicCheckProvider::checkHasType", "doc": "&quot;Check that $value has a given type.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkScalar", "name": "Valit\\Providers\\BasicCheckProvider::checkScalar", "doc": "&quot;Check that $value is scalar.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkBool", "name": "Valit\\Providers\\BasicCheckProvider::checkBool", "doc": "&quot;Check that $value is a boolean.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkArray", "name": "Valit\\Providers\\BasicCheckProvider::checkArray", "doc": "&quot;Check that $value is an array.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkFloat", "name": "Valit\\Providers\\BasicCheckProvider::checkFloat", "doc": "&quot;Check that $value is a float.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkInteger", "name": "Valit\\Providers\\BasicCheckProvider::checkInteger", "doc": "&quot;Check that $value is a an integer.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkString", "name": "Valit\\Providers\\BasicCheckProvider::checkString", "doc": "&quot;Check that $value is a float.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkObject", "name": "Valit\\Providers\\BasicCheckProvider::checkObject", "doc": "&quot;Check that $value is a float.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkNull", "name": "Valit\\Providers\\BasicCheckProvider::checkNull", "doc": "&quot;Check that $value is null.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkNotNull", "name": "Valit\\Providers\\BasicCheckProvider::checkNotNull", "doc": "&quot;Check that $value is null.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkResource", "name": "Valit\\Providers\\BasicCheckProvider::checkResource", "doc": "&quot;Check that $value is a resource.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkResourceType", "name": "Valit\\Providers\\BasicCheckProvider::checkResourceType", "doc": "&quot;Check that $value is a resource of the given type.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\BasicCheckProvider", "fromLink": "Valit/Providers/BasicCheckProvider.html", "link": "Valit/Providers/BasicCheckProvider.html#method_checkCallable", "name": "Valit\\Providers\\BasicCheckProvider::checkCallable", "doc": "&quot;Check that $value is callable.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/CustomCheckProvider.html", "name": "Valit\\Providers\\CustomCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\CustomCheckProvider", "fromLink": "Valit/Providers/CustomCheckProvider.html", "link": "Valit/Providers/CustomCheckProvider.html#method_checkPassesCallback", "name": "Valit\\Providers\\CustomCheckProvider::checkPassesCallback", "doc": "&quot;Check if $value passes a validation via a callback that returns a boolean.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\CustomCheckProvider", "fromLink": "Valit/Providers/CustomCheckProvider.html", "link": "Valit/Providers/CustomCheckProvider.html#method_checkPassesChecker", "name": "Valit\\Providers\\CustomCheckProvider::checkPassesChecker", "doc": "&quot;Chec if $value passes a custom checker.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/DateCheckProvider.html", "name": "Valit\\Providers\\DateCheckProvider", "doc": "&quot;Check dates for validity.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkDateParsable", "name": "Valit\\Providers\\DateCheckProvider::checkDateParsable", "doc": "&quot;Check if $value is a string containing a parseable date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkDateAfter", "name": "Valit\\Providers\\DateCheckProvider::checkDateAfter", "doc": "&quot;Check if $value is a date after $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkDateBefore", "name": "Valit\\Providers\\DateCheckProvider::checkDateBefore", "doc": "&quot;Check if $value is a date after $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkInThePast", "name": "Valit\\Providers\\DateCheckProvider::checkInThePast", "doc": "&quot;Check if $value is a date in the past.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkInTheFuture", "name": "Valit\\Providers\\DateCheckProvider::checkInTheFuture", "doc": "&quot;Check if $value is a date in the past.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkAtMidnight", "name": "Valit\\Providers\\DateCheckProvider::checkAtMidnight", "doc": "&quot;Check if $value is a date where the time-component is 00:00:00.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkAtNoon", "name": "Valit\\Providers\\DateCheckProvider::checkAtNoon", "doc": "&quot;Check if $value is a date where the time-component is 12:00:00.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkSameDateAs", "name": "Valit\\Providers\\DateCheckProvider::checkSameDateAs", "doc": "&quot;Check if $value is a datetime where the date-component is\nthe same as the date-component of $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkSameDayOfWeek", "name": "Valit\\Providers\\DateCheckProvider::checkSameDayOfWeek", "doc": "&quot;Check if $value is a datetime where the weekday-component is\nthe same as the weekday-component of $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkDayOfMonth", "name": "Valit\\Providers\\DateCheckProvider::checkDayOfMonth", "doc": "&quot;Check if $value is a datetime where the day of month is $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\DateCheckProvider", "fromLink": "Valit/Providers/DateCheckProvider.html", "link": "Valit/Providers/DateCheckProvider.html#method_checkBirthday", "name": "Valit\\Providers\\DateCheckProvider::checkBirthday", "doc": "&quot;Check if $value is a datetime where the day-month-component is\nthe same as the day-month-component of $otherDate.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/FileSystemCheckProvider.html", "name": "Valit\\Providers\\FileSystemCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkFileExists", "name": "Valit\\Providers\\FileSystemCheckProvider::checkFileExists", "doc": "&quot;Check if $value is an existing file.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkDirExists", "name": "Valit\\Providers\\FileSystemCheckProvider::checkDirExists", "doc": "&quot;Check if $value is an existing directory.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkIsWritable", "name": "Valit\\Providers\\FileSystemCheckProvider::checkIsWritable", "doc": "&quot;Check if $value is exists on the filesystem and is writable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkIsReadable", "name": "Valit\\Providers\\FileSystemCheckProvider::checkIsReadable", "doc": "&quot;Check if $value is exists on the filesystem and is readable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkExecutable", "name": "Valit\\Providers\\FileSystemCheckProvider::checkExecutable", "doc": "&quot;Check if $value is an executable filesystem path.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkLink", "name": "Valit\\Providers\\FileSystemCheckProvider::checkLink", "doc": "&quot;Check if $value is a filesystem link.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkLargerThan", "name": "Valit\\Providers\\FileSystemCheckProvider::checkLargerThan", "doc": "&quot;Check if $value is a filename and that the file is larger than $size.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkSmallerThan", "name": "Valit\\Providers\\FileSystemCheckProvider::checkSmallerThan", "doc": "&quot;Check if $value is a filename and that the file is smaller than $size.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkFileTime", "name": "Valit\\Providers\\FileSystemCheckProvider::checkFileTime", "doc": "&quot;Check if $value is a file, that the timestamp denoted by $timeFunc compares\nto $against given the $compareFunc.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkCreatedAfter", "name": "Valit\\Providers\\FileSystemCheckProvider::checkCreatedAfter", "doc": "&quot;Check if $value is a file that was created after $date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkCreatedBefore", "name": "Valit\\Providers\\FileSystemCheckProvider::checkCreatedBefore", "doc": "&quot;Check if $value is a file that was created before $date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkModifiedAfter", "name": "Valit\\Providers\\FileSystemCheckProvider::checkModifiedAfter", "doc": "&quot;Check if $value is a file that was modified after $date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkModifiedBefore", "name": "Valit\\Providers\\FileSystemCheckProvider::checkModifiedBefore", "doc": "&quot;Check if $value is a file that was modified before $date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkAccessedAfter", "name": "Valit\\Providers\\FileSystemCheckProvider::checkAccessedAfter", "doc": "&quot;Check if $value is a file that was accessed after $date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\FileSystemCheckProvider", "fromLink": "Valit/Providers/FileSystemCheckProvider.html", "link": "Valit/Providers/FileSystemCheckProvider.html#method_checkAccessedBefore", "name": "Valit\\Providers\\FileSystemCheckProvider::checkAccessedBefore", "doc": "&quot;Check if $value is a file that was accessed before $date.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/JsonCheckProvider.html", "name": "Valit\\Providers\\JsonCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\JsonCheckProvider", "fromLink": "Valit/Providers/JsonCheckProvider.html", "link": "Valit/Providers/JsonCheckProvider.html#method_checkIsJson", "name": "Valit\\Providers\\JsonCheckProvider::checkIsJson", "doc": "&quot;Check that $value is valid json.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/LogicCheckProvider.html", "name": "Valit\\Providers\\LogicCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkLogic", "name": "Valit\\Providers\\LogicCheckProvider::checkLogic", "doc": "&quot;Check that $logic is successful.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkPassesOneOf", "name": "Valit\\Providers\\LogicCheckProvider::checkPassesOneOf", "doc": "&quot;Check that one (and only one) of the given branches succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkPassesAnyOf", "name": "Valit\\Providers\\LogicCheckProvider::checkPassesAnyOf", "doc": "&quot;Check that at least one of the given branches succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkPassesAllOf", "name": "Valit\\Providers\\LogicCheckProvider::checkPassesAllOf", "doc": "&quot;Check that all of the given branches succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkPassesNoneOf", "name": "Valit\\Providers\\LogicCheckProvider::checkPassesNoneOf", "doc": "&quot;Check that none of the given branches succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkPassesAllOrNone", "name": "Valit\\Providers\\LogicCheckProvider::checkPassesAllOrNone", "doc": "&quot;Check that none of the given branches succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkDoesNotPass", "name": "Valit\\Providers\\LogicCheckProvider::checkDoesNotPass", "doc": "&quot;Check that the given scenario does not succeed if given $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\LogicCheckProvider", "fromLink": "Valit/Providers/LogicCheckProvider.html", "link": "Valit/Providers/LogicCheckProvider.html#method_checkConditional", "name": "Valit\\Providers\\LogicCheckProvider::checkConditional", "doc": "&quot;Check conditional if-then-else clause.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/NumberCheckProvider.html", "name": "Valit\\Providers\\NumberCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_gcd", "name": "Valit\\Providers\\NumberCheckProvider::gcd", "doc": "&quot;Find the greatest common divisor between two numbers.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_numeric", "name": "Valit\\Providers\\NumberCheckProvider::numeric", "doc": "&quot;Check that $value is numeric in a php-version consistent way.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkNumeric", "name": "Valit\\Providers\\NumberCheckProvider::checkNumeric", "doc": "&quot;Check that $value is numeric.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkRealNumber", "name": "Valit\\Providers\\NumberCheckProvider::checkRealNumber", "doc": "&quot;Check that $value is a real number.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkNaturalNumber", "name": "Valit\\Providers\\NumberCheckProvider::checkNaturalNumber", "doc": "&quot;Check that $value is a natural number.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkGreaterThan", "name": "Valit\\Providers\\NumberCheckProvider::checkGreaterThan", "doc": "&quot;Check if $value &gt; $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkGreaterThanOrEqual", "name": "Valit\\Providers\\NumberCheckProvider::checkGreaterThanOrEqual", "doc": "&quot;Check if $value &gt;= $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkLessThan", "name": "Valit\\Providers\\NumberCheckProvider::checkLessThan", "doc": "&quot;Check if $value &amp;lt; $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkLessThanOrEqual", "name": "Valit\\Providers\\NumberCheckProvider::checkLessThanOrEqual", "doc": "&quot;Check if $value &amp;lt;= $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkFloatEqual", "name": "Valit\\Providers\\NumberCheckProvider::checkFloatEqual", "doc": "&quot;Check if $value is extremely close to $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkOdd", "name": "Valit\\Providers\\NumberCheckProvider::checkOdd", "doc": "&quot;Check that $value is an odd integer.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkEven", "name": "Valit\\Providers\\NumberCheckProvider::checkEven", "doc": "&quot;Check that $value is an even integer.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkPositive", "name": "Valit\\Providers\\NumberCheckProvider::checkPositive", "doc": "&quot;Check if $value is positive.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkNegative", "name": "Valit\\Providers\\NumberCheckProvider::checkNegative", "doc": "&quot;Check if $value is negative.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkPrimeRelativeTo", "name": "Valit\\Providers\\NumberCheckProvider::checkPrimeRelativeTo", "doc": "&quot;Check if $value is prime relative to $against.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\NumberCheckProvider", "fromLink": "Valit/Providers/NumberCheckProvider.html", "link": "Valit/Providers/NumberCheckProvider.html#method_checkDivisibleBy", "name": "Valit\\Providers\\NumberCheckProvider::checkDivisibleBy", "doc": "&quot;Check if $value is prime relative to $against.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/ObjectCheckProvider.html", "name": "Valit\\Providers\\ObjectCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkObjectOrClass", "name": "Valit\\Providers\\ObjectCheckProvider::checkObjectOrClass", "doc": "&quot;Check if is object or class.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkClassName", "name": "Valit\\Providers\\ObjectCheckProvider::checkClassName", "doc": "&quot;Check if is class name.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkInterfaceName", "name": "Valit\\Providers\\ObjectCheckProvider::checkInterfaceName", "doc": "&quot;Check if value is the name of an interface.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkTraitName", "name": "Valit\\Providers\\ObjectCheckProvider::checkTraitName", "doc": "&quot;Check if value is the fqcn of a trait.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkInstanceOf", "name": "Valit\\Providers\\ObjectCheckProvider::checkInstanceOf", "doc": "&quot;Check if $value is an instance of $fqcn.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkImplements", "name": "Valit\\Providers\\ObjectCheckProvider::checkImplements", "doc": "&quot;Check if value implements the $fqcn interface.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkHasMethod", "name": "Valit\\Providers\\ObjectCheckProvider::checkHasMethod", "doc": "&quot;Check if value is an object or class that has the given method.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkHasProperty", "name": "Valit\\Providers\\ObjectCheckProvider::checkHasProperty", "doc": "&quot;Check if value is an object or class that has the given propert.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\ObjectCheckProvider", "fromLink": "Valit/Providers/ObjectCheckProvider.html", "link": "Valit/Providers/ObjectCheckProvider.html#method_checkHasTrait", "name": "Valit\\Providers\\ObjectCheckProvider::checkHasTrait", "doc": "&quot;Check if value is an object or class that uses the given trait.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/StringCheckProvider.html", "name": "Valit\\Providers\\StringCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkHexString", "name": "Valit\\Providers\\StringCheckProvider::checkHexString", "doc": "&quot;Check if $value contains only hexidecimal characters.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkDecimalString", "name": "Valit\\Providers\\StringCheckProvider::checkDecimalString", "doc": "&quot;Check if $value contains only decimal characters.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkCurrencyCode", "name": "Valit\\Providers\\StringCheckProvider::checkCurrencyCode", "doc": "&quot;Check if $value is a valid alphabetical currency code string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkCurrencyNumber", "name": "Valit\\Providers\\StringCheckProvider::checkCurrencyNumber", "doc": "&quot;Check if $value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkEmail", "name": "Valit\\Providers\\StringCheckProvider::checkEmail", "doc": "&quot;Check if $value contains a syntax-valid email address.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkUppercase", "name": "Valit\\Providers\\StringCheckProvider::checkUppercase", "doc": "&quot;Check if $value is only uppercase characters.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkLowercase", "name": "Valit\\Providers\\StringCheckProvider::checkLowercase", "doc": "&quot;Check if $value is only lowercase characters.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkAlphaNumeric", "name": "Valit\\Providers\\StringCheckProvider::checkAlphaNumeric", "doc": "&quot;Check if $value contains only alpha-numeric characters.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkMatchesRegex", "name": "Valit\\Providers\\StringCheckProvider::checkMatchesRegex", "doc": "&quot;Check if $value matches a given regular regex.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkStringable", "name": "Valit\\Providers\\StringCheckProvider::checkStringable", "doc": "&quot;Check if a given value can be converted to a string in a meaningful way.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkStartsWith", "name": "Valit\\Providers\\StringCheckProvider::checkStartsWith", "doc": "&quot;Check if $value starts with a given string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkEndsWith", "name": "Valit\\Providers\\StringCheckProvider::checkEndsWith", "doc": "&quot;Check if $value ends with a given string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkContainsString", "name": "Valit\\Providers\\StringCheckProvider::checkContainsString", "doc": "&quot;Check if $value contains a given substring.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkShorterThan", "name": "Valit\\Providers\\StringCheckProvider::checkShorterThan", "doc": "&quot;Check if $value is a string that is shorter than $length.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkLongerThan", "name": "Valit\\Providers\\StringCheckProvider::checkLongerThan", "doc": "&quot;Check if $value is a string that is longer than $length.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkRelativeLength", "name": "Valit\\Providers\\StringCheckProvider::checkRelativeLength", "doc": "&quot;Check if $value is a string where the length compares to $against using the $operator.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkLengthInRange", "name": "Valit\\Providers\\StringCheckProvider::checkLengthInRange", "doc": "&quot;Check if $value is a string where the length is between $min and $max.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\StringCheckProvider", "fromLink": "Valit/Providers/StringCheckProvider.html", "link": "Valit/Providers/StringCheckProvider.html#method_checkOnlyChars", "name": "Valit\\Providers\\StringCheckProvider::checkOnlyChars", "doc": "&quot;Check if $value is a string that only contain chars from the $chars string.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/UriCheckProvider.html", "name": "Valit\\Providers\\UriCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\UriCheckProvider", "fromLink": "Valit/Providers/UriCheckProvider.html", "link": "Valit/Providers/UriCheckProvider.html#method_checkHostname", "name": "Valit\\Providers\\UriCheckProvider::checkHostname", "doc": "&quot;Check if $value is a valid host name.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UriCheckProvider", "fromLink": "Valit/Providers/UriCheckProvider.html", "link": "Valit/Providers/UriCheckProvider.html#method_checkIpAddress", "name": "Valit\\Providers\\UriCheckProvider::checkIpAddress", "doc": "&quot;Check if $value is a valid ipv4 or ipv6 address.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UriCheckProvider", "fromLink": "Valit/Providers/UriCheckProvider.html", "link": "Valit/Providers/UriCheckProvider.html#method_checkUrl", "name": "Valit\\Providers\\UriCheckProvider::checkUrl", "doc": "&quot;Check if $value is a complete and absolute web url.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/UuidCheckProvider.html", "name": "Valit\\Providers\\UuidCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_parseUuid", "name": "Valit\\Providers\\UuidCheckProvider::parseUuid", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkIsUuid", "name": "Valit\\Providers\\UuidCheckProvider::checkIsUuid", "doc": "&quot;Check if $value is a uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUuidVersion", "name": "Valit\\Providers\\UuidCheckProvider::checkUuidVersion", "doc": "&quot;Check if $value is a uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUidV1", "name": "Valit\\Providers\\UuidCheckProvider::checkUidV1", "doc": "&quot;Check if $value is a version 1 uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUidV2", "name": "Valit\\Providers\\UuidCheckProvider::checkUidV2", "doc": "&quot;Check if $value is a version 2 uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUidV3", "name": "Valit\\Providers\\UuidCheckProvider::checkUidV3", "doc": "&quot;Check if $value is a version 3 uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUidV4", "name": "Valit\\Providers\\UuidCheckProvider::checkUidV4", "doc": "&quot;Check if $value is a version 4 uuid.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\UuidCheckProvider", "fromLink": "Valit/Providers/UuidCheckProvider.html", "link": "Valit/Providers/UuidCheckProvider.html#method_checkUidV5", "name": "Valit\\Providers\\UuidCheckProvider::checkUidV5", "doc": "&quot;Check if $value is a version 5 uuid.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Providers", "fromLink": "Valit/Providers.html", "link": "Valit/Providers/XmlCheckProvider.html", "name": "Valit\\Providers\\XmlCheckProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_canParse", "name": "Valit\\Providers\\XmlCheckProvider::canParse", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkXmlString", "name": "Valit\\Providers\\XmlCheckProvider::checkXmlString", "doc": "&quot;Check if $value is a string containing valid xml.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkMatchesXmlAdvanced", "name": "Valit\\Providers\\XmlCheckProvider::checkMatchesXmlAdvanced", "doc": "&quot;Check that $value and $against are semantically the same.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkMatchesXmlWithWhiteSpace", "name": "Valit\\Providers\\XmlCheckProvider::checkMatchesXmlWithWhiteSpace", "doc": "&quot;Check that $value matches $against, enforcing whitespace similarity as well.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkMatchesXmlWithCase", "name": "Valit\\Providers\\XmlCheckProvider::checkMatchesXmlWithCase", "doc": "&quot;Check that $value matches $against, enforcing case similarity as well.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkMatchesXmlStrict", "name": "Valit\\Providers\\XmlCheckProvider::checkMatchesXmlStrict", "doc": "&quot;Check that $value matches $against, enforcing whitespace and case similarities as well.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Providers\\XmlCheckProvider", "fromLink": "Valit/Providers/XmlCheckProvider.html", "link": "Valit/Providers/XmlCheckProvider.html#method_checkMatchesXml", "name": "Valit\\Providers\\XmlCheckProvider::checkMatchesXml", "doc": "&quot;Check that $value matches $against, ignoring differences in case and whitespace.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Result", "fromLink": "Valit/Result.html", "link": "Valit/Result/AssertionResult.html", "name": "Valit\\Result\\AssertionResult", "doc": "&quot;Result of executing a single assertion.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method___construct", "name": "Valit\\Result\\AssertionResult::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_success", "name": "Valit\\Result\\AssertionResult::success", "doc": "&quot;Did the validation succeed?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_message", "name": "Valit\\Result\\AssertionResult::message", "doc": "&quot;Get the error message template.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_context", "name": "Valit\\Result\\AssertionResult::context", "doc": "&quot;Get the contextual variables connected to the check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_path", "name": "Valit\\Result\\AssertionResult::path", "doc": "&quot;Get the path of this result.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_withPath", "name": "Valit\\Result\\AssertionResult::withPath", "doc": "&quot;Set a path on the object for injection into a ContainerValidator.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\AssertionResult", "fromLink": "Valit/Result/AssertionResult.html", "link": "Valit/Result/AssertionResult.html#method_normalize", "name": "Valit\\Result\\AssertionResult::normalize", "doc": "&quot;Normalize an AssertionResult for injection\ninto a result container.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Result", "fromLink": "Valit/Result.html", "link": "Valit/Result/AssertionResultBag.html", "name": "Valit\\Result\\AssertionResultBag", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Result\\AssertionResultBag", "fromLink": "Valit/Result/AssertionResultBag.html", "link": "Valit/Result/AssertionResultBag.html#method___construct", "name": "Valit\\Result\\AssertionResultBag::__construct", "doc": "&quot;Constructor.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Result", "fromLink": "Valit/Result.html", "link": "Valit/Result/ContainerResultBag.html", "name": "Valit\\Result\\ContainerResultBag", "doc": "&quot;Result of validating a container.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method___construct", "name": "Valit\\Result\\ContainerResultBag::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_alias", "name": "Valit\\Result\\ContainerResultBag::alias", "doc": "&quot;Set the variable name alias.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_addAssertionResultBag", "name": "Valit\\Result\\ContainerResultBag::addAssertionResultBag", "doc": "&quot;Add a result.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_hasErrors", "name": "Valit\\Result\\ContainerResultBag::hasErrors", "doc": "&quot;Did one or more tests fail?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_success", "name": "Valit\\Result\\ContainerResultBag::success", "doc": "&quot;Did all tests pass?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_results", "name": "Valit\\Result\\ContainerResultBag::results", "doc": "&quot;Return all results.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_errors", "name": "Valit\\Result\\ContainerResultBag::errors", "doc": "&quot;Return list of rendered errors.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_errorMessages", "name": "Valit\\Result\\ContainerResultBag::errorMessages", "doc": "&quot;Get all the error messages for a given path.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_errorMessagesByPath", "name": "Valit\\Result\\ContainerResultBag::errorMessagesByPath", "doc": "&quot;Get all the error messages for a given path.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_statusMessages", "name": "Valit\\Result\\ContainerResultBag::statusMessages", "doc": "&quot;Get all status messages.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_statusMessagesByPath", "name": "Valit\\Result\\ContainerResultBag::statusMessagesByPath", "doc": "&quot;Get all the status messages for a given path.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Result\\ContainerResultBag", "fromLink": "Valit/Result/ContainerResultBag.html", "link": "Valit/Result/ContainerResultBag.html#method_orThrowException", "name": "Valit\\Result\\ContainerResultBag::orThrowException", "doc": "&quot;Throw an exception if this container has any errors.&quot;"},
            
            {"type": "Trait", "fromName": "Valit\\Traits", "fromLink": "Valit/Traits.html", "link": "Valit/Traits/ContainsResults.html", "name": "Valit\\Traits\\ContainsResults", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_varName", "name": "Valit\\Traits\\ContainsResults::varName", "doc": "&quot;The the variable name alias.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_alias", "name": "Valit\\Traits\\ContainsResults::alias", "doc": "&quot;Set the variable name alias.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_value", "name": "Valit\\Traits\\ContainsResults::value", "doc": "&quot;Get the validated value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_success", "name": "Valit\\Traits\\ContainsResults::success", "doc": "&quot;Have all checks been completed successfully?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_hasErrors", "name": "Valit\\Traits\\ContainsResults::hasErrors", "doc": "&quot;Return true if there are errors.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_valueOr", "name": "Valit\\Traits\\ContainsResults::valueOr", "doc": "&quot;Get the validated value, but use a fallback if the validation failed.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_results", "name": "Valit\\Traits\\ContainsResults::results", "doc": "&quot;Get the assertie results.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_addAssertionResult", "name": "Valit\\Traits\\ContainsResults::addAssertionResult", "doc": "&quot;Add new result to the internal results list.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_errors", "name": "Valit\\Traits\\ContainsResults::errors", "doc": "&quot;Get all failed assertion results.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_errorMessages", "name": "Valit\\Traits\\ContainsResults::errorMessages", "doc": "&quot;Return an array of rendered error messages.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_statusMessages", "name": "Valit\\Traits\\ContainsResults::statusMessages", "doc": "&quot;Status messages.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Traits\\ContainsResults", "fromLink": "Valit/Traits/ContainsResults.html", "link": "Valit/Traits/ContainsResults.html#method_firstErrorMessage", "name": "Valit\\Traits\\ContainsResults::firstErrorMessage", "doc": "&quot;Get the first error message.&quot;"},
            
            {"type": "Trait", "fromName": "Valit\\Traits", "fromLink": "Valit/Traits.html", "link": "Valit/Traits/ProvideViaReflection.html", "name": "Valit\\Traits\\ProvideViaReflection", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Traits\\ProvideViaReflection", "fromLink": "Valit/Traits/ProvideViaReflection.html", "link": "Valit/Traits/ProvideViaReflection.html#method_provides", "name": "Valit\\Traits\\ProvideViaReflection::provides", "doc": "&quot;Return all the checks provided by this checkprovider.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/CallbackChecker.html", "name": "Valit\\Util\\CallbackChecker", "doc": "&quot;Class for executing custom callbacks.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\CallbackChecker", "fromLink": "Valit/Util/CallbackChecker.html", "link": "Valit/Util/CallbackChecker.html#method___construct", "name": "Valit\\Util\\CallbackChecker::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CallbackChecker", "fromLink": "Valit/Util/CallbackChecker.html", "link": "Valit/Util/CallbackChecker.html#method_check", "name": "Valit\\Util\\CallbackChecker::check", "doc": "&quot;Execute the check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CallbackChecker", "fromLink": "Valit/Util/CallbackChecker.html", "link": "Valit/Util/CallbackChecker.html#method___debugInfo", "name": "Valit\\Util\\CallbackChecker::__debugInfo", "doc": "&quot;Info for print_r.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/CheckInfo.html", "name": "Valit\\Util\\CheckInfo", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method___construct", "name": "Valit\\Util\\CheckInfo::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_makeParamString", "name": "Valit\\Util\\CheckInfo::makeParamString", "doc": "&quot;Build a param string used to generate a method signature.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_inferType", "name": "Valit\\Util\\CheckInfo::inferType", "doc": "&quot;Infer the type of a given parameter.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_parseDescription", "name": "Valit\\Util\\CheckInfo::parseDescription", "doc": "&quot;Parse doc block to extract a headline and a description.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_addAlias", "name": "Valit\\Util\\CheckInfo::addAlias", "doc": "&quot;Add an alias to this check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_headline", "name": "Valit\\Util\\CheckInfo::headline", "doc": "&quot;Get the headline for this check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_description", "name": "Valit\\Util\\CheckInfo::description", "doc": "&quot;Get the description of this check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\CheckInfo", "fromLink": "Valit/Util/CheckInfo.html", "link": "Valit/Util/CheckInfo.html#method_aliases", "name": "Valit\\Util\\CheckInfo::aliases", "doc": "&quot;Get the aliases of this check.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/ContainerTestClass.html", "name": "Valit\\Util\\ContainerTestClass", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\ContainerTestClass", "fromLink": "Valit/Util/ContainerTestClass.html", "link": "Valit/Util/ContainerTestClass.html#method_getIterator", "name": "Valit\\Util\\ContainerTestClass::getIterator", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\ContainerTestClass", "fromLink": "Valit/Util/ContainerTestClass.html", "link": "Valit/Util/ContainerTestClass.html#method_validationData", "name": "Valit\\Util\\ContainerTestClass::validationData", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\ContainerTestClass", "fromLink": "Valit/Util/ContainerTestClass.html", "link": "Valit/Util/ContainerTestClass.html#method___debugInfo", "name": "Valit\\Util\\ContainerTestClass::__debugInfo", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\ContainerTestClass", "fromLink": "Valit/Util/ContainerTestClass.html", "link": "Valit/Util/ContainerTestClass.html#method_jsonSerialize", "name": "Valit\\Util\\ContainerTestClass::jsonSerialize", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/Date.html", "name": "Valit\\Util\\Date", "doc": "&quot;Provide functionality to parse dates that have been string-encoded.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_mockCurrentTime", "name": "Valit\\Util\\Date::mockCurrentTime", "doc": "&quot;In order to facilitate testing, we must be able to lock\/mock the \&quot;now\&quot; datetime.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_now", "name": "Valit\\Util\\Date::now", "doc": "&quot;Get the current DateTime.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_fromUnixTimestamp", "name": "Valit\\Util\\Date::fromUnixTimestamp", "doc": "&quot;Create a DateTime from a unix timestamp.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_fromNegativeTimestamp", "name": "Valit\\Util\\Date::fromNegativeTimestamp", "doc": "&quot;Be compatible with HHVM and PHP 5.5.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_parse", "name": "Valit\\Util\\Date::parse", "doc": "&quot;Convert the candidate value into a DateTime object.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_canParse", "name": "Valit\\Util\\Date::canParse", "doc": "&quot;Is the candidate value can be treated as a date.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_compare", "name": "Valit\\Util\\Date::compare", "doc": "&quot;Compare two datetimes in a PHP-version agnostic way.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Date", "fromLink": "Valit/Util/Date.html", "link": "Valit/Util/Date.html#method_comparison", "name": "Valit\\Util\\Date::comparison", "doc": "&quot;Compare two dates.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/File.html", "name": "Valit\\Util\\File", "doc": "&quot;Provide functionality to access files and file properties.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\File", "fromLink": "Valit/Util/File.html", "link": "Valit/Util/File.html#method_mock", "name": "Valit\\Util\\File::mock", "doc": "&quot;Override the file info for a single file.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\File", "fromLink": "Valit/Util/File.html", "link": "Valit/Util/File.html#method_removeOverride", "name": "Valit\\Util\\File::removeOverride", "doc": "&quot;Remove mock of a given file.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\File", "fromLink": "Valit/Util/File.html", "link": "Valit/Util/File.html#method_info", "name": "Valit\\Util\\File::info", "doc": "&quot;Get the file info.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\File", "fromLink": "Valit/Util/File.html", "link": "Valit/Util/File.html#method_time", "name": "Valit\\Util\\File::time", "doc": "&quot;Get the file time.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\File", "fromLink": "Valit/Util/File.html", "link": "Valit/Util/File.html#method_exists", "name": "Valit\\Util\\File::exists", "doc": "&quot;Does $file exist?&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/FileInfo.html", "name": "Valit\\Util\\FileInfo", "doc": "&quot;Provide file information.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\FileInfo", "fromLink": "Valit/Util/FileInfo.html", "link": "Valit/Util/FileInfo.html#method___construct", "name": "Valit\\Util\\FileInfo::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FileInfo", "fromLink": "Valit/Util/FileInfo.html", "link": "Valit/Util/FileInfo.html#method_custom", "name": "Valit\\Util\\FileInfo::custom", "doc": "&quot;Create custum FileInfo instance.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FileInfo", "fromLink": "Valit/Util/FileInfo.html", "link": "Valit/Util/FileInfo.html#method_init", "name": "Valit\\Util\\FileInfo::init", "doc": "&quot;Initialize instance variables for a given file.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FileInfo", "fromLink": "Valit/Util/FileInfo.html", "link": "Valit/Util/FileInfo.html#method_initFromFileInfo", "name": "Valit\\Util\\FileInfo::initFromFileInfo", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/FlatContainer.html", "name": "Valit\\Util\\FlatContainer", "doc": "&quot;A Container for data to be validated.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method___construct", "name": "Valit\\Util\\FlatContainer::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method_isSimpleValue", "name": "Valit\\Util\\FlatContainer::isSimpleValue", "doc": "&quot;Is the given variable a \&quot;simple\&quot; value.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method_expandedValue", "name": "Valit\\Util\\FlatContainer::expandedValue", "doc": "&quot;Expand the data available on an object.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method_flatten", "name": "Valit\\Util\\FlatContainer::flatten", "doc": "&quot;Flatten multi dimensional array into associative array with slashes.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method_globToRegex", "name": "Valit\\Util\\FlatContainer::globToRegex", "doc": "&quot;Turn a field name glob into a regular expression.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\FlatContainer", "fromLink": "Valit/Util/FlatContainer.html", "link": "Valit/Util/FlatContainer.html#method_find", "name": "Valit\\Util\\FlatContainer::find", "doc": "&quot;Find all the values that match the given field name glob.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/Size.html", "name": "Valit\\Util\\Size", "doc": "&quot;Utility Class for parsing suffixed size strings to bytes.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\Size", "fromLink": "Valit/Util/Size.html", "link": "Valit/Util/Size.html#method_toBytes", "name": "Valit\\Util\\Size::toBytes", "doc": "&quot;Convert a human-readable size-string to bytes.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Util", "fromLink": "Valit/Util.html", "link": "Valit/Util/Val.html", "name": "Valit\\Util\\Val", "doc": "&quot;Utility class for converting variables.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_stringable", "name": "Valit\\Util\\Val::stringable", "doc": "&quot;Can the given value be coerced into a string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_numeric", "name": "Valit\\Util\\Val::numeric", "doc": "&quot;Can the given value be coerced into a number?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_iterable", "name": "Valit\\Util\\Val::iterable", "doc": "&quot;Can value be traversed (is it iterable) ?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_arrayable", "name": "Valit\\Util\\Val::arrayable", "doc": "&quot;Can value be accessed as an array?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_countable", "name": "Valit\\Util\\Val::countable", "doc": "&quot;Can we count the elements in $value?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_intable", "name": "Valit\\Util\\Val::intable", "doc": "&quot;Can the value be converted to an integer without loss of information?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_throwable", "name": "Valit\\Util\\Val::throwable", "doc": "&quot;Can the value be thrown via the throw keyword?&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toString", "name": "Valit\\Util\\Val::toString", "doc": "&quot;Coerce a value to string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toArray", "name": "Valit\\Util\\Val::toArray", "doc": "&quot;Coerce a value to to an array.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toInt", "name": "Valit\\Util\\Val::toInt", "doc": "&quot;Convert a variable to an integer.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toFloat", "name": "Valit\\Util\\Val::toFloat", "doc": "&quot;Convert a variable to a float.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toBool", "name": "Valit\\Util\\Val::toBool", "doc": "&quot;Convert a variable to a bool.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_toClosure", "name": "Valit\\Util\\Val::toClosure", "doc": "&quot;Create a closure from a callable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_count", "name": "Valit\\Util\\Val::count", "doc": "&quot;Count the elements in an array, a Countable or a Traversable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_format", "name": "Valit\\Util\\Val::format", "doc": "&quot;Format a given value into a string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_escape", "name": "Valit\\Util\\Val::escape", "doc": "&quot;Format a value for being displayed as a string in an error message.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_formatCallback", "name": "Valit\\Util\\Val::formatCallback", "doc": "&quot;Get the callback as a string.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_mustBe", "name": "Valit\\Util\\Val::mustBe", "doc": "&quot;Ensure that a value has a given type or class.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_explodeAndTrim", "name": "Valit\\Util\\Val::explodeAndTrim", "doc": "&quot;Normalize a string of separated words into an array.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_is", "name": "Valit\\Util\\Val::is", "doc": "&quot;Check if a value has a given type or class.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_isArrayOf", "name": "Valit\\Util\\Val::isArrayOf", "doc": "&quot;Check if $value is an 0-indexed continuous array of the given type.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_map", "name": "Valit\\Util\\Val::map", "doc": "&quot;Map an iterable variable.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_firstNotNull", "name": "Valit\\Util\\Val::firstNotNull", "doc": "&quot;Return the first argument that is not null.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Util\\Val", "fromLink": "Valit/Util/Val.html", "link": "Valit/Util/Val.html#method_firstElementNotNull", "name": "Valit\\Util\\Val::firstElementNotNull", "doc": "&quot;Return the first array element that is not null.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Validators", "fromLink": "Valit/Validators.html", "link": "Valit/Validators/ContainerValidator.html", "name": "Valit\\Validators\\ContainerValidator", "doc": "&quot;Validate a container (variable with array access).&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Validators\\ContainerValidator", "fromLink": "Valit/Validators/ContainerValidator.html", "link": "Valit/Validators/ContainerValidator.html#method___construct", "name": "Valit\\Validators\\ContainerValidator::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ContainerValidator", "fromLink": "Valit/Validators/ContainerValidator.html", "link": "Valit/Validators/ContainerValidator.html#method_passes", "name": "Valit\\Validators\\ContainerValidator::passes", "doc": "&quot;Check container against a number of assertions.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ContainerValidator", "fromLink": "Valit/Validators/ContainerValidator.html", "link": "Valit/Validators/ContainerValidator.html#method_executeAndAdd", "name": "Valit\\Validators\\ContainerValidator::executeAndAdd", "doc": "&quot;Execute an array of assertions on a number of values.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ContainerValidator", "fromLink": "Valit/Validators/ContainerValidator.html", "link": "Valit/Validators/ContainerValidator.html#method___call", "name": "Valit\\Validators\\ContainerValidator::__call", "doc": "&quot;Magic method for setting the alias of the container.&quot;"},
            
            {"type": "Class", "fromName": "Valit\\Validators", "fromLink": "Valit/Validators.html", "link": "Valit/Validators/ValueValidator.html", "name": "Valit\\Validators\\ValueValidator", "doc": "&quot;Validate a value.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method___construct", "name": "Valit\\Validators\\ValueValidator::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method___call", "name": "Valit\\Validators\\ValueValidator::__call", "doc": "&quot;Execute checks by \&quot;calling\&quot; them.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method_executeCheck", "name": "Valit\\Validators\\ValueValidator::executeCheck", "doc": "&quot;Execute a check.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method_orThrowException", "name": "Valit\\Validators\\ValueValidator::orThrowException", "doc": "&quot;Throw exceptions if any failures has occurred or occur later in the execution stream.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method_throwExceptionIfNotSuccessful", "name": "Valit\\Validators\\ValueValidator::throwExceptionIfNotSuccessful", "doc": "&quot;Throw exceptions if any failures has occurred or occur later in the execution stream.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method_contains", "name": "Valit\\Validators\\ValueValidator::contains", "doc": "&quot;Check container against a number of assertions.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Validators\\ValueValidator", "fromLink": "Valit/Validators/ValueValidator.html", "link": "Valit/Validators/ValueValidator.html#method___debugInfo", "name": "Valit\\Validators\\ValueValidator::__debugInfo", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Valit", "fromLink": "Valit.html", "link": "Valit/Value.html", "name": "Valit\\Value", "doc": "&quot;Factory for AssertionBags.&quot;"},
                                                        {"type": "Method", "fromName": "Valit\\Value", "fromLink": "Valit/Value.html", "link": "Valit/Value.html#method___callStatic", "name": "Valit\\Value::__callStatic", "doc": "&quot;Short hand for creating an AssertionBag.&quot;"},
                    {"type": "Method", "fromName": "Valit\\Value", "fromLink": "Valit/Value.html", "link": "Valit/Value.html#method___call", "name": "Valit\\Value::__call", "doc": "&quot;Short hand for creating an AssertionBag.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


